
glcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000da  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000012e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000012e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000160  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  0000019c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000003f0  00000000  00000000  000001e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000018c  00000000  00000000  000005d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000162  00000000  00000000  00000760  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000090  00000000  00000000  000008c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001f3  00000000  00000000  00000954  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000083  00000000  00000000  00000b47  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00000bca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a0 36       	cpi	r26, 0x60	; 96
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 66 00 	call	0xcc	; 0xcc <main>
  74:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <initSPI>:
	// Select a font
	ks0108SelectFont(Corsiva_12, ks0108ReadFontData, BLACK);
	// Set a position
	ks0108GotoXY(5,30);
	// Print some text
	ks0108Puts_P(PSTR("http://www.apetech.de\nmailto:me@apetech.de"));
  7c:	82 ea       	ldi	r24, 0xA2	; 162
  7e:	87 bb       	out	0x17, r24	; 23
  80:	c1 9a       	sbi	0x18, 1	; 24
  82:	81 e5       	ldi	r24, 0x51	; 81
}
  84:	8d b9       	out	0x0d, r24	; 13
  86:	08 95       	ret

00000088 <SPI_Write>:
  88:	c1 98       	cbi	0x18, 1	; 24
  8a:	90 e4       	ldi	r25, 0x40	; 64
  8c:	9f b9       	out	0x0f, r25	; 15
  8e:	77 9b       	sbis	0x0e, 7	; 14
  90:	fe cf       	rjmp	.-4      	; 0x8e <SPI_Write+0x6>
	// Start MCP23S17 OpCode transmission
	SPDR = SPI_SLAVE_ID | ((SPI_SLAVE_ADDR << 1) & 0x0E)| SPI_SLAVE_WRITE;
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
	// Start MCP23S17 Register Address transmission
	SPDR = addr;
  92:	8f b9       	out	0x0f, r24	; 15
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
  94:	77 9b       	sbis	0x0e, 7	; 14
  96:	fe cf       	rjmp	.-4      	; 0x94 <SPI_Write+0xc>

	// Start Data transmission
	SPDR = data;
  98:	6f b9       	out	0x0f, r22	; 15
	// Wait for transmission complete
	while(!(SPSR & (1<<SPIF)));
  9a:	77 9b       	sbis	0x0e, 7	; 14
  9c:	fe cf       	rjmp	.-4      	; 0x9a <SPI_Write+0x12>
	// CS pin is not active
	SPI_PORT |= (1<<SPI_CS);
  9e:	c1 9a       	sbi	0x18, 1	; 24
  a0:	08 95       	ret

000000a2 <initMCP23S17>:
	SPCR = (1<<SPE) | (1<<MSTR) | (1<<SPR0);
}

void initMCP23S17()
{
	SPI_Write(IOCONA,0x28);   // I/O Control Register: BANK=0, SEQOP=1, HAEN=1 (Enable Addressing)
  a2:	68 e2       	ldi	r22, 0x28	; 40
  a4:	8a e0       	ldi	r24, 0x0A	; 10
  a6:	0e 94 44 00 	call	0x88	; 0x88 <SPI_Write>
	SPI_Write(IODIRA,0x00);   // GPIOA As Output
  aa:	60 e0       	ldi	r22, 0x00	; 0
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	0e 94 44 00 	call	0x88	; 0x88 <SPI_Write>
	SPI_Write(IODIRB,0x00);   // GPIOB As Output
  b2:	60 e0       	ldi	r22, 0x00	; 0
  b4:	81 e0       	ldi	r24, 0x01	; 1
  b6:	0e 94 44 00 	call	0x88	; 0x88 <SPI_Write>
	SPI_Write(GPIOA,0x00);    // Reset Output on GPIOA
  ba:	60 e0       	ldi	r22, 0x00	; 0
  bc:	82 e1       	ldi	r24, 0x12	; 18
  be:	0e 94 44 00 	call	0x88	; 0x88 <SPI_Write>
	SPI_Write(GPIOB,0x00);    // Reset Output on GPIOB
  c2:	60 e0       	ldi	r22, 0x00	; 0
  c4:	83 e1       	ldi	r24, 0x13	; 19
  c6:	0e 94 44 00 	call	0x88	; 0x88 <SPI_Write>
  ca:	08 95       	ret

000000cc <main>:
#define GPIOA  0x12
#define GPIOB  0x13

int main(void) 
{
	initSPI();
  cc:	0e 94 3e 00 	call	0x7c	; 0x7c <initSPI>
	initMCP23S17();
  d0:	0e 94 51 00 	call	0xa2	; 0xa2 <initMCP23S17>
	
	while(1)
	{
		
	}
  d4:	ff cf       	rjmp	.-2      	; 0xd4 <main+0x8>

000000d6 <_exit>:
  d6:	f8 94       	cli

000000d8 <__stop_program>:
  d8:	ff cf       	rjmp	.-2      	; 0xd8 <__stop_program>
