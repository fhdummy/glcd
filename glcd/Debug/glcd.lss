
glcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000162  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  000001d6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001d6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000208  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000244  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000456  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000001a8  00000000  00000000  00000712  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000001ec  00000000  00000000  000008ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000f0  00000000  00000000  00000aa8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028c  00000000  00000000  00000b98  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000021b  00000000  00000000  00000e24  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000068  00000000  00000000  0000103f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 a2 00 	call	0x144	; 0x144 <main>
  74:	0c 94 af 00 	jmp	0x15e	; 0x15e <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <MCP23S17_Init>:
uint8_t MCP23S17_ByteRW(uint8_t b);

void MCP23S17_Init()
{
        // If it has already been initialized, no need to do it again.
        if (MCP23S17_Inited)
  7c:	80 91 60 00 	lds	r24, 0x0060
  80:	81 11       	cpse	r24, r1
  82:	15 c0       	rjmp	.+42     	; 0xae <MCP23S17_Init+0x32>
        }

        // Initialize the SPI pins
        // Set MOSI, SCLK, and CS as outputs, MISO as input
        // (Also, set the MCP23S17 reset line as an output)
        DDRB |= SPI_CS | SPI_SCK | SPI_MOSI | MCP23S17_RESET;
  84:	87 b3       	in	r24, 0x17	; 23
  86:	81 6b       	ori	r24, 0xB1	; 177
  88:	87 bb       	out	0x17, r24	; 23
        DDRB &= ~SPI_MISO;
  8a:	be 98       	cbi	0x17, 6	; 23
        // We can run it at 8 MHz (divider of 2 from 16 MHz system clock -- maximum speed of MCP23S17 10 MHz)
#if ((F_CPU / 2) > 10000000)
#error This code assumes that the CPU clock divided by 2 is less than or equal to the MCP23S17's maximum speed of 10 MHz, and in this case, it's not.
#endif

        SPCR =  (0 << SPIE) | // No SPI interrupts
  8c:	80 e5       	ldi	r24, 0x50	; 80
  8e:	8d b9       	out	0x0d, r24	; 13
                        (1 << MSTR) | // Master mode
                        (0 << CPOL) | // SPI mode 0,0
                        (0 << CPHA) |
                        (0 << SPR0);  // SCK frequency = F_CPU/2 (because of SPI2X being set below

        SPSR = (1 << SPI2X);  // Double the SPI clock rate -- allows /2 instead of /4
  90:	81 e0       	ldi	r24, 0x01	; 1
  92:	8e b9       	out	0x0e, r24	; 14

        // Leave CS deasserted
        DEASSERT_CS();
  94:	c4 9a       	sbi	0x18, 4	; 24

        // Pull the MCP23S17 out of reset (it's pulled down to GND on the board with a 100k pulldown
        // so it won't activate during AVR ISP programming)
        PORTB |= MCP23S17_RESET;
  96:	c0 9a       	sbi	0x18, 0	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  98:	2f e7       	ldi	r18, 0x7F	; 127
  9a:	38 e3       	ldi	r19, 0x38	; 56
  9c:	91 e0       	ldi	r25, 0x01	; 1
  9e:	21 50       	subi	r18, 0x01	; 1
  a0:	30 40       	sbci	r19, 0x00	; 0
  a2:	90 40       	sbci	r25, 0x00	; 0
  a4:	e1 f7       	brne	.-8      	; 0x9e <MCP23S17_Init+0x22>
  a6:	00 c0       	rjmp	.+0      	; 0xa8 <MCP23S17_Init+0x2c>
  a8:	00 00       	nop

        _delay_ms(50);

        // All done!
        MCP23S17_Inited = true;
  aa:	80 93 60 00 	sts	0x0060, r24
  ae:	08 95       	ret

000000b0 <MCP23S17_ByteRW>:
        return MCP23S17_ReadBothRegs(MCP23S17_GPPUA);
}

uint8_t MCP23S17_ByteRW(uint8_t b)
{
        SPDR = b;
  b0:	8f b9       	out	0x0f, r24	; 15
        while ((SPSR & (1 << SPIF)) == 0);
  b2:	77 9b       	sbis	0x0e, 7	; 14
  b4:	fe cf       	rjmp	.-4      	; 0xb2 <MCP23S17_ByteRW+0x2>
        return SPDR;
  b6:	8f b1       	in	r24, 0x0f	; 15
}
  b8:	08 95       	ret

000000ba <MCP23S17_WriteBothRegs>:

void MCP23S17_WriteBothRegs(uint8_t addrA, uint16_t value)
{
  ba:	1f 93       	push	r17
  bc:	cf 93       	push	r28
  be:	df 93       	push	r29
  c0:	18 2f       	mov	r17, r24
  c2:	c6 2f       	mov	r28, r22
  c4:	d7 2f       	mov	r29, r23
        // addrA should contain the address of the "A" register.
        // the chip should also be in "same bank" mode.

        ASSERT_CS();
  c6:	c4 98       	cbi	0x18, 4	; 24

        // Start off the communication by telling the MCP23S17 that we are writing to a register
        MCP23S17_ByteRW(MCP23S17_CONTROL_WRITE(0));
  c8:	80 e4       	ldi	r24, 0x40	; 64
  ca:	0e 94 58 00 	call	0xb0	; 0xb0 <MCP23S17_ByteRW>

        // Tell it the first register we're writing to (the "A" register)
        MCP23S17_ByteRW(addrA);
  ce:	81 2f       	mov	r24, r17
  d0:	0e 94 58 00 	call	0xb0	; 0xb0 <MCP23S17_ByteRW>

        // Write the first byte of the register
        MCP23S17_ByteRW((uint8_t)((value >> 8) & 0xFF));
  d4:	8d 2f       	mov	r24, r29
  d6:	0e 94 58 00 	call	0xb0	; 0xb0 <MCP23S17_ByteRW>

        // It should auto-increment to the "B" register, now write that
        MCP23S17_ByteRW((uint8_t)(value & 0xFF));
  da:	8c 2f       	mov	r24, r28
  dc:	0e 94 58 00 	call	0xb0	; 0xb0 <MCP23S17_ByteRW>

        DEASSERT_CS();
  e0:	c4 9a       	sbi	0x18, 4	; 24
}
  e2:	df 91       	pop	r29
  e4:	cf 91       	pop	r28
  e6:	1f 91       	pop	r17
  e8:	08 95       	ret

000000ea <MCP23S17_SetDDR>:
        // so I invert any DDR values in this driver.
        // In other words, when you set or get the DDR through
        // this driver, the 1s and 0s are backwards from what
        // the MCP23S17's datasheet says, but they are
        // consistent with the AVR. I value the consistency more.
        MCP23S17_WriteBothRegs(MCP23S17_IODIRA, ~ddr);
  ea:	bc 01       	movw	r22, r24
  ec:	60 95       	com	r22
  ee:	70 95       	com	r23
  f0:	80 e0       	ldi	r24, 0x00	; 0
  f2:	0e 94 5d 00 	call	0xba	; 0xba <MCP23S17_WriteBothRegs>
  f6:	08 95       	ret

000000f8 <MCP23S17_SetPins>:
}

void MCP23S17_SetPins(uint16_t data)
{
        MCP23S17_WriteBothRegs(MCP23S17_GPIOA, data);
  f8:	bc 01       	movw	r22, r24
  fa:	82 e1       	ldi	r24, 0x12	; 18
  fc:	0e 94 5d 00 	call	0xba	; 0xba <MCP23S17_WriteBothRegs>
 100:	08 95       	ret

00000102 <MCP23S17_ReadBothRegs>:

        DEASSERT_CS();
}

uint16_t MCP23S17_ReadBothRegs(uint8_t addrA)
{
 102:	cf 93       	push	r28
 104:	df 93       	push	r29
 106:	c8 2f       	mov	r28, r24
        uint16_t returnVal;

        ASSERT_CS();
 108:	c4 98       	cbi	0x18, 4	; 24

        // Start off the communication by telling the MCP23S17 that we are reading from a register
        MCP23S17_ByteRW(MCP23S17_CONTROL_READ(0));
 10a:	81 e4       	ldi	r24, 0x41	; 65
 10c:	0e 94 58 00 	call	0xb0	; 0xb0 <MCP23S17_ByteRW>

        // Tell it which register we're reading from (the "A" register)
        MCP23S17_ByteRW(addrA);
 110:	8c 2f       	mov	r24, r28
 112:	0e 94 58 00 	call	0xb0	; 0xb0 <MCP23S17_ByteRW>

        // Read the first byte of the register
        returnVal = (((uint16_t)MCP23S17_ByteRW(0)) << 8);
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	0e 94 58 00 	call	0xb0	; 0xb0 <MCP23S17_ByteRW>
 11c:	c8 2f       	mov	r28, r24
 11e:	d0 e0       	ldi	r29, 0x00	; 0
 120:	dc 2f       	mov	r29, r28
 122:	cc 27       	eor	r28, r28

        // It should auto-increment to the "B" register, now read that
        returnVal |= MCP23S17_ByteRW(0);
 124:	80 e0       	ldi	r24, 0x00	; 0
 126:	0e 94 58 00 	call	0xb0	; 0xb0 <MCP23S17_ByteRW>

        DEASSERT_CS();
 12a:	c4 9a       	sbi	0x18, 4	; 24

        return returnVal;
}
 12c:	9e 01       	movw	r18, r28
 12e:	28 2b       	or	r18, r24
 130:	c9 01       	movw	r24, r18
 132:	df 91       	pop	r29
 134:	cf 91       	pop	r28
 136:	08 95       	ret

00000138 <MCP23S17_GetDDR>:
uint16_t MCP23S17_GetDDR(void)
{
        // As I mentioned above, DDR bits are inverted from
        // what the MCP23S17's datasheet says, but
        // consistent with what the AVR's datasheet says
        return ~MCP23S17_ReadBothRegs(MCP23S17_IODIRA);
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	0e 94 81 00 	call	0x102	; 0x102 <MCP23S17_ReadBothRegs>
}
 13e:	80 95       	com	r24
 140:	90 95       	com	r25
 142:	08 95       	ret

00000144 <main>:
}

int main()
{
	
	MCP23S17_Init();
 144:	0e 94 3e 00 	call	0x7c	; 0x7c <MCP23S17_Init>
	MCP23S17_SetDDR(0x00);
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	90 e0       	ldi	r25, 0x00	; 0
 14c:	0e 94 75 00 	call	0xea	; 0xea <MCP23S17_SetDDR>
	MCP23S17_SetPins(0x00);
 150:	80 e0       	ldi	r24, 0x00	; 0
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	0e 94 7c 00 	call	0xf8	; 0xf8 <MCP23S17_SetPins>
	
	uint16_t temp = MCP23S17_GetDDR();
 158:	0e 94 9c 00 	call	0x138	; 0x138 <MCP23S17_GetDDR>
	
	
	while(1)
	{
		
	}
 15c:	ff cf       	rjmp	.-2      	; 0x15c <main+0x18>

0000015e <_exit>:
 15e:	f8 94       	cli

00000160 <__stop_program>:
 160:	ff cf       	rjmp	.-2      	; 0x160 <__stop_program>
