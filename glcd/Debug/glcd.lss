
glcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000534  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006a  00800060  00000534  000005c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  008000ca  008000ca  00000632  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000632  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000664  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  000006a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000da2  00000000  00000000  00000750  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000380  00000000  00000000  000014f2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000420  00000000  00000000  00001872  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001a0  00000000  00000000  00001c94  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000326  00000000  00000000  00001e34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005f3  00000000  00000000  0000215a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  0000274d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 1a 01 	jmp	0x234	; 0x234 <__ctors_end>
   4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
   8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
   c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  10:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  14:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  18:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  1c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  20:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  24:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  28:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  2c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  30:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  34:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  38:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  3c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  40:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  44:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  48:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  4c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  50:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>

00000054 <__trampolines_end>:
  54:	00 00       	nop
  56:	00 00       	nop
  58:	00 00       	nop
  5a:	00 5f       	subi	r16, 0xF0	; 240
  5c:	00 00       	nop
  5e:	00 07       	cpc	r16, r16
  60:	00 07       	cpc	r16, r16
  62:	00 14       	cp	r0, r0
  64:	7f 14       	cp	r7, r15
  66:	7f 14       	cp	r7, r15
  68:	24 2a       	or	r2, r20
  6a:	7f 2a       	or	r7, r31
  6c:	12 23       	and	r17, r18
  6e:	13 08       	sbc	r1, r3
  70:	64 62       	ori	r22, 0x24	; 36
  72:	36 49       	sbci	r19, 0x96	; 150
  74:	55 22       	and	r5, r21
  76:	50 00       	.word	0x0050	; ????
  78:	05 03       	mulsu	r16, r21
  7a:	00 00       	nop
  7c:	00 1c       	adc	r0, r0
  7e:	22 41       	sbci	r18, 0x12	; 18
  80:	00 00       	nop
  82:	41 22       	and	r4, r17
  84:	1c 00       	.word	0x001c	; ????
  86:	08 2a       	or	r0, r24
  88:	1c 2a       	or	r1, r28
  8a:	08 08       	sbc	r0, r8
  8c:	08 3e       	cpi	r16, 0xE8	; 232
  8e:	08 08       	sbc	r0, r8
  90:	00 50       	subi	r16, 0x00	; 0
  92:	30 00       	.word	0x0030	; ????
  94:	00 08       	sbc	r0, r0
  96:	08 08       	sbc	r0, r8
  98:	08 08       	sbc	r0, r8
  9a:	00 30       	cpi	r16, 0x00	; 0
  9c:	30 00       	.word	0x0030	; ????
  9e:	00 20       	and	r0, r0
  a0:	10 08       	sbc	r1, r0
  a2:	04 02       	muls	r16, r20
  a4:	3e 51       	subi	r19, 0x1E	; 30
  a6:	49 45       	sbci	r20, 0x59	; 89
  a8:	3e 00       	.word	0x003e	; ????
  aa:	42 7f       	andi	r20, 0xF2	; 242
  ac:	40 00       	.word	0x0040	; ????
  ae:	42 61       	ori	r20, 0x12	; 18
  b0:	51 49       	sbci	r21, 0x91	; 145
  b2:	46 21       	and	r20, r6
  b4:	41 45       	sbci	r20, 0x51	; 81
  b6:	4b 31       	cpi	r20, 0x1B	; 27
  b8:	18 14       	cp	r1, r8
  ba:	12 7f       	andi	r17, 0xF2	; 242
  bc:	10 27       	eor	r17, r16
  be:	45 45       	sbci	r20, 0x55	; 85
  c0:	45 39       	cpi	r20, 0x95	; 149
  c2:	3c 4a       	sbci	r19, 0xAC	; 172
  c4:	49 49       	sbci	r20, 0x99	; 153
  c6:	30 01       	movw	r6, r0
  c8:	71 09       	sbc	r23, r1
  ca:	05 03       	mulsu	r16, r21
  cc:	36 49       	sbci	r19, 0x96	; 150
  ce:	49 49       	sbci	r20, 0x99	; 153
  d0:	36 06       	cpc	r3, r22
  d2:	49 49       	sbci	r20, 0x99	; 153
  d4:	29 1e       	adc	r2, r25
  d6:	00 36       	cpi	r16, 0x60	; 96
  d8:	36 00       	.word	0x0036	; ????
  da:	00 00       	nop
  dc:	56 36       	cpi	r21, 0x66	; 102
  de:	00 00       	nop
  e0:	00 08       	sbc	r0, r0
  e2:	14 22       	and	r1, r20
  e4:	41 14       	cp	r4, r1
  e6:	14 14       	cp	r1, r4
  e8:	14 14       	cp	r1, r4
  ea:	41 22       	and	r4, r17
  ec:	14 08       	sbc	r1, r4
  ee:	00 02       	muls	r16, r16
  f0:	01 51       	subi	r16, 0x11	; 17
  f2:	09 06       	cpc	r0, r25
  f4:	32 49       	sbci	r19, 0x92	; 146
  f6:	79 41       	sbci	r23, 0x19	; 25
  f8:	3e 7e       	andi	r19, 0xEE	; 238
  fa:	11 11       	cpse	r17, r1
  fc:	11 7e       	andi	r17, 0xE1	; 225
  fe:	7f 49       	sbci	r23, 0x9F	; 159
 100:	49 49       	sbci	r20, 0x99	; 153
 102:	36 3e       	cpi	r19, 0xE6	; 230
 104:	41 41       	sbci	r20, 0x11	; 17
 106:	41 22       	and	r4, r17
 108:	7f 41       	sbci	r23, 0x1F	; 31
 10a:	41 22       	and	r4, r17
 10c:	1c 7f       	andi	r17, 0xFC	; 252
 10e:	49 49       	sbci	r20, 0x99	; 153
 110:	49 41       	sbci	r20, 0x19	; 25
 112:	7f 09       	sbc	r23, r15
 114:	09 01       	movw	r0, r18
 116:	01 3e       	cpi	r16, 0xE1	; 225
 118:	41 41       	sbci	r20, 0x11	; 17
 11a:	51 32       	cpi	r21, 0x21	; 33
 11c:	7f 08       	sbc	r7, r15
 11e:	08 08       	sbc	r0, r8
 120:	7f 00       	.word	0x007f	; ????
 122:	41 7f       	andi	r20, 0xF1	; 241
 124:	41 00       	.word	0x0041	; ????
 126:	20 40       	sbci	r18, 0x00	; 0
 128:	41 3f       	cpi	r20, 0xF1	; 241
 12a:	01 7f       	andi	r16, 0xF1	; 241
 12c:	08 14       	cp	r0, r8
 12e:	22 41       	sbci	r18, 0x12	; 18
 130:	7f 40       	sbci	r23, 0x0F	; 15
 132:	40 40       	sbci	r20, 0x00	; 0
 134:	40 7f       	andi	r20, 0xF0	; 240
 136:	02 04       	cpc	r0, r2
 138:	02 7f       	andi	r16, 0xF2	; 242
 13a:	7f 04       	cpc	r7, r15
 13c:	08 10       	cpse	r0, r8
 13e:	7f 3e       	cpi	r23, 0xEF	; 239
 140:	41 41       	sbci	r20, 0x11	; 17
 142:	41 3e       	cpi	r20, 0xE1	; 225
 144:	7f 09       	sbc	r23, r15
 146:	09 09       	sbc	r16, r9
 148:	06 3e       	cpi	r16, 0xE6	; 230
 14a:	41 51       	subi	r20, 0x11	; 17
 14c:	21 5e       	subi	r18, 0xE1	; 225
 14e:	7f 09       	sbc	r23, r15
 150:	19 29       	or	r17, r9
 152:	46 46       	sbci	r20, 0x66	; 102
 154:	49 49       	sbci	r20, 0x99	; 153
 156:	49 31       	cpi	r20, 0x19	; 25
 158:	01 01       	movw	r0, r2
 15a:	7f 01       	movw	r14, r30
 15c:	01 3f       	cpi	r16, 0xF1	; 241
 15e:	40 40       	sbci	r20, 0x00	; 0
 160:	40 3f       	cpi	r20, 0xF0	; 240
 162:	1f 20       	and	r1, r15
 164:	40 20       	and	r4, r0
 166:	1f 7f       	andi	r17, 0xFF	; 255
 168:	20 18       	sub	r2, r0
 16a:	20 7f       	andi	r18, 0xF0	; 240
 16c:	63 14       	cp	r6, r3
 16e:	08 14       	cp	r0, r8
 170:	63 03       	mulsu	r22, r19
 172:	04 78       	andi	r16, 0x84	; 132
 174:	04 03       	mulsu	r16, r20
 176:	61 51       	subi	r22, 0x11	; 17
 178:	49 45       	sbci	r20, 0x59	; 89
 17a:	43 00       	.word	0x0043	; ????
 17c:	00 7f       	andi	r16, 0xF0	; 240
 17e:	41 41       	sbci	r20, 0x11	; 17
 180:	02 04       	cpc	r0, r2
 182:	08 10       	cpse	r0, r8
 184:	20 41       	sbci	r18, 0x10	; 16
 186:	41 7f       	andi	r20, 0xF1	; 241
 188:	00 00       	nop
 18a:	04 02       	muls	r16, r20
 18c:	01 02       	muls	r16, r17
 18e:	04 40       	sbci	r16, 0x04	; 4
 190:	40 40       	sbci	r20, 0x00	; 0
 192:	40 40       	sbci	r20, 0x00	; 0
 194:	00 01       	movw	r0, r0
 196:	02 04       	cpc	r0, r2
 198:	00 20       	and	r0, r0
 19a:	54 54       	subi	r21, 0x44	; 68
 19c:	54 78       	andi	r21, 0x84	; 132
 19e:	7f 48       	sbci	r23, 0x8F	; 143
 1a0:	44 44       	sbci	r20, 0x44	; 68
 1a2:	38 38       	cpi	r19, 0x88	; 136
 1a4:	44 44       	sbci	r20, 0x44	; 68
 1a6:	44 20       	and	r4, r4
 1a8:	38 44       	sbci	r19, 0x48	; 72
 1aa:	44 48       	sbci	r20, 0x84	; 132
 1ac:	7f 38       	cpi	r23, 0x8F	; 143
 1ae:	54 54       	subi	r21, 0x44	; 68
 1b0:	54 18       	sub	r5, r4
 1b2:	08 7e       	andi	r16, 0xE8	; 232
 1b4:	09 01       	movw	r0, r18
 1b6:	02 08       	sbc	r0, r2
 1b8:	14 54       	subi	r17, 0x44	; 68
 1ba:	54 3c       	cpi	r21, 0xC4	; 196
 1bc:	7f 08       	sbc	r7, r15
 1be:	04 04       	cpc	r0, r4
 1c0:	78 00       	.word	0x0078	; ????
 1c2:	44 7d       	andi	r20, 0xD4	; 212
 1c4:	40 00       	.word	0x0040	; ????
 1c6:	20 40       	sbci	r18, 0x00	; 0
 1c8:	44 3d       	cpi	r20, 0xD4	; 212
 1ca:	00 00       	nop
 1cc:	7f 10       	cpse	r7, r15
 1ce:	28 44       	sbci	r18, 0x48	; 72
 1d0:	00 41       	sbci	r16, 0x10	; 16
 1d2:	7f 40       	sbci	r23, 0x0F	; 15
 1d4:	00 7c       	andi	r16, 0xC0	; 192
 1d6:	04 18       	sub	r0, r4
 1d8:	04 78       	andi	r16, 0x84	; 132
 1da:	7c 08       	sbc	r7, r12
 1dc:	04 04       	cpc	r0, r4
 1de:	78 38       	cpi	r23, 0x88	; 136
 1e0:	44 44       	sbci	r20, 0x44	; 68
 1e2:	44 38       	cpi	r20, 0x84	; 132
 1e4:	7c 14       	cp	r7, r12
 1e6:	14 14       	cp	r1, r4
 1e8:	08 08       	sbc	r0, r8
 1ea:	14 14       	cp	r1, r4
 1ec:	18 7c       	andi	r17, 0xC8	; 200
 1ee:	7c 08       	sbc	r7, r12
 1f0:	04 04       	cpc	r0, r4
 1f2:	08 48       	sbci	r16, 0x88	; 136
 1f4:	54 54       	subi	r21, 0x44	; 68
 1f6:	54 20       	and	r5, r4
 1f8:	04 3f       	cpi	r16, 0xF4	; 244
 1fa:	44 40       	sbci	r20, 0x04	; 4
 1fc:	20 3c       	cpi	r18, 0xC0	; 192
 1fe:	40 40       	sbci	r20, 0x00	; 0
 200:	20 7c       	andi	r18, 0xC0	; 192
 202:	1c 20       	and	r1, r12
 204:	40 20       	and	r4, r0
 206:	1c 3c       	cpi	r17, 0xCC	; 204
 208:	40 30       	cpi	r20, 0x00	; 0
 20a:	40 3c       	cpi	r20, 0xC0	; 192
 20c:	44 28       	or	r4, r4
 20e:	10 28       	or	r1, r0
 210:	44 0c       	add	r4, r4
 212:	50 50       	subi	r21, 0x00	; 0
 214:	50 3c       	cpi	r21, 0xC0	; 192
 216:	44 64       	ori	r20, 0x44	; 68
 218:	54 4c       	sbci	r21, 0xC4	; 196
 21a:	44 00       	.word	0x0044	; ????
 21c:	08 36       	cpi	r16, 0x68	; 104
 21e:	41 00       	.word	0x0041	; ????
 220:	00 00       	nop
 222:	7f 00       	.word	0x007f	; ????
 224:	00 00       	nop
 226:	41 36       	cpi	r20, 0x61	; 97
 228:	08 00       	.word	0x0008	; ????
 22a:	08 08       	sbc	r0, r8
 22c:	2a 1c       	adc	r2, r10
 22e:	08 08       	sbc	r0, r8
 230:	1c 2a       	or	r1, r28
 232:	08 08       	sbc	r0, r8

00000234 <__ctors_end>:
 234:	11 24       	eor	r1, r1
 236:	1f be       	out	0x3f, r1	; 63
 238:	cf e5       	ldi	r28, 0x5F	; 95
 23a:	d8 e0       	ldi	r29, 0x08	; 8
 23c:	de bf       	out	0x3e, r29	; 62
 23e:	cd bf       	out	0x3d, r28	; 61

00000240 <__do_copy_data>:
 240:	10 e0       	ldi	r17, 0x00	; 0
 242:	a0 e6       	ldi	r26, 0x60	; 96
 244:	b0 e0       	ldi	r27, 0x00	; 0
 246:	e4 e3       	ldi	r30, 0x34	; 52
 248:	f5 e0       	ldi	r31, 0x05	; 5
 24a:	02 c0       	rjmp	.+4      	; 0x250 <__do_copy_data+0x10>
 24c:	05 90       	lpm	r0, Z+
 24e:	0d 92       	st	X+, r0
 250:	aa 3c       	cpi	r26, 0xCA	; 202
 252:	b1 07       	cpc	r27, r17
 254:	d9 f7       	brne	.-10     	; 0x24c <__do_copy_data+0xc>

00000256 <__do_clear_bss>:
 256:	20 e0       	ldi	r18, 0x00	; 0
 258:	aa ec       	ldi	r26, 0xCA	; 202
 25a:	b0 e0       	ldi	r27, 0x00	; 0
 25c:	01 c0       	rjmp	.+2      	; 0x260 <.do_clear_bss_start>

0000025e <.do_clear_bss_loop>:
 25e:	1d 92       	st	X+, r1

00000260 <.do_clear_bss_start>:
 260:	ac 3c       	cpi	r26, 0xCC	; 204
 262:	b2 07       	cpc	r27, r18
 264:	e1 f7       	brne	.-8      	; 0x25e <.do_clear_bss_loop>
 266:	0e 94 4a 02 	call	0x494	; 0x494 <main>
 26a:	0c 94 98 02 	jmp	0x530	; 0x530 <_exit>

0000026e <__bad_interrupt>:
 26e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000272 <GLCD_EnableController>:
}

/* Enable controller */
void GLCD_EnableController(unsigned char controller)
{
switch(controller){
 272:	88 23       	and	r24, r24
 274:	19 f0       	breq	.+6      	; 0x27c <GLCD_EnableController+0xa>
 276:	81 30       	cpi	r24, 0x01	; 1
 278:	19 f0       	breq	.+6      	; 0x280 <GLCD_EnableController+0xe>
 27a:	08 95       	ret
	case 0 : CTRL_PORT &= ~GLCD_CS1; break;
 27c:	c6 98       	cbi	0x18, 6	; 24
 27e:	08 95       	ret
	case 1 : CTRL_PORT &= ~GLCD_CS2; break;
 280:	c5 98       	cbi	0x18, 5	; 24
 282:	08 95       	ret

00000284 <GLCD_DisableController>:
}

/* Disable controller */
void GLCD_DisableController(unsigned char controller)
{
switch(controller){
 284:	88 23       	and	r24, r24
 286:	19 f0       	breq	.+6      	; 0x28e <GLCD_DisableController+0xa>
 288:	81 30       	cpi	r24, 0x01	; 1
 28a:	19 f0       	breq	.+6      	; 0x292 <GLCD_DisableController+0xe>
 28c:	08 95       	ret
	case 0 : CTRL_PORT |= GLCD_CS1; break;
 28e:	c6 9a       	sbi	0x18, 6	; 24
 290:	08 95       	ret
	case 1 : CTRL_PORT |= GLCD_CS2; break;
 292:	c5 9a       	sbi	0x18, 5	; 24
 294:	08 95       	ret

00000296 <GLCD_ReadStatus>:
	}
}

/* Read status from controller */
unsigned char GLCD_ReadStatus(unsigned char controller)
{
 296:	cf 93       	push	r28
 298:	df 93       	push	r29
 29a:	c8 2f       	mov	r28, r24
	unsigned char status;
	GLCD_DATA_DIR = 0x00;
 29c:	11 ba       	out	0x11, r1	; 17
	GLCD_DATA_PORT = 0x00;
 29e:	12 ba       	out	0x12, r1	; 18
	CTRL_PORT |= GLCD_RW;
 2a0:	c1 9a       	sbi	0x18, 1	; 24
	CTRL_PORT &= ~GLCD_RS;
 2a2:	c2 98       	cbi	0x18, 2	; 24
	GLCD_EnableController(controller);
 2a4:	0e 94 39 01 	call	0x272	; 0x272 <GLCD_EnableController>
	CTRL_PORT |= GLCD_EN;
 2a8:	c0 9a       	sbi	0x18, 0	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 2aa:	8f e3       	ldi	r24, 0x3F	; 63
 2ac:	96 e0       	ldi	r25, 0x06	; 6
 2ae:	01 97       	sbiw	r24, 0x01	; 1
 2b0:	f1 f7       	brne	.-4      	; 0x2ae <GLCD_ReadStatus+0x18>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <GLCD_ReadStatus+0x1e>
 2b4:	00 00       	nop
	GLCD_Delay();
	status = GLCD_DATA_PIN;
 2b6:	d0 b3       	in	r29, 0x10	; 16
	CTRL_PORT &= ~GLCD_EN;
 2b8:	c0 98       	cbi	0x18, 0	; 24
	GLCD_DisableController(controller);
 2ba:	8c 2f       	mov	r24, r28
 2bc:	0e 94 42 01 	call	0x284	; 0x284 <GLCD_DisableController>
	return status;
}
 2c0:	8d 2f       	mov	r24, r29
 2c2:	df 91       	pop	r29
 2c4:	cf 91       	pop	r28
 2c6:	08 95       	ret

000002c8 <GLCD_WriteCommand>:

/* Write command to controller */
void GLCD_WriteCommand(unsigned char commandToWrite, unsigned char controller)
{
 2c8:	cf 93       	push	r28
 2ca:	df 93       	push	r29
 2cc:	d8 2f       	mov	r29, r24
 2ce:	c6 2f       	mov	r28, r22
	char t = GLCD_ReadStatus(controller);
 2d0:	86 2f       	mov	r24, r22
 2d2:	0e 94 4b 01 	call	0x296	; 0x296 <GLCD_ReadStatus>
	while(t&DISPLAY_STATUS_BUSY)
 2d6:	88 23       	and	r24, r24
 2d8:	2c f4       	brge	.+10     	; 0x2e4 <GLCD_WriteCommand+0x1c>
	{
		t = GLCD_ReadStatus(controller);
 2da:	8c 2f       	mov	r24, r28
 2dc:	0e 94 4b 01 	call	0x296	; 0x296 <GLCD_ReadStatus>

/* Write command to controller */
void GLCD_WriteCommand(unsigned char commandToWrite, unsigned char controller)
{
	char t = GLCD_ReadStatus(controller);
	while(t&DISPLAY_STATUS_BUSY)
 2e0:	88 23       	and	r24, r24
 2e2:	dc f3       	brlt	.-10     	; 0x2da <GLCD_WriteCommand+0x12>
	{
		t = GLCD_ReadStatus(controller);
	}
	GLCD_DATA_DIR = 0xFF;
 2e4:	8f ef       	ldi	r24, 0xFF	; 255
 2e6:	81 bb       	out	0x11, r24	; 17
	CTRL_PORT &= ~(GLCD_RW | GLCD_RS);
 2e8:	98 b3       	in	r25, 0x18	; 24
 2ea:	99 7f       	andi	r25, 0xF9	; 249
 2ec:	98 bb       	out	0x18, r25	; 24
	GLCD_EnableController(controller);
 2ee:	8c 2f       	mov	r24, r28
 2f0:	0e 94 39 01 	call	0x272	; 0x272 <GLCD_EnableController>
	GLCD_DATA_PORT = commandToWrite;
 2f4:	d2 bb       	out	0x12, r29	; 18
	CTRL_PORT |= GLCD_EN;
 2f6:	c0 9a       	sbi	0x18, 0	; 24
 2f8:	8f e3       	ldi	r24, 0x3F	; 63
 2fa:	96 e0       	ldi	r25, 0x06	; 6
 2fc:	01 97       	sbiw	r24, 0x01	; 1
 2fe:	f1 f7       	brne	.-4      	; 0x2fc <GLCD_WriteCommand+0x34>
 300:	00 c0       	rjmp	.+0      	; 0x302 <GLCD_WriteCommand+0x3a>
 302:	00 00       	nop
	GLCD_Delay();
	CTRL_PORT &= ~GLCD_EN;
 304:	c0 98       	cbi	0x18, 0	; 24
	GLCD_DisableController(controller);
 306:	8c 2f       	mov	r24, r28
 308:	0e 94 42 01 	call	0x284	; 0x284 <GLCD_DisableController>
}
 30c:	df 91       	pop	r29
 30e:	cf 91       	pop	r28
 310:	08 95       	ret

00000312 <GLCD_WriteData>:
	return data;
}

/* Write data to current position */
void GLCD_WriteData(unsigned char dataToWrite)
{
 312:	cf 93       	push	r28
 314:	c8 2f       	mov	r28, r24
	while(GLCD_ReadStatus(screen_x / 64)&DISPLAY_STATUS_BUSY);
 316:	80 91 cb 00 	lds	r24, 0x00CB
 31a:	82 95       	swap	r24
 31c:	86 95       	lsr	r24
 31e:	86 95       	lsr	r24
 320:	83 70       	andi	r24, 0x03	; 3
 322:	0e 94 4b 01 	call	0x296	; 0x296 <GLCD_ReadStatus>
 326:	88 23       	and	r24, r24
 328:	b4 f3       	brlt	.-20     	; 0x316 <GLCD_WriteData+0x4>
	GLCD_DATA_DIR = 0xFF;
 32a:	8f ef       	ldi	r24, 0xFF	; 255
 32c:	81 bb       	out	0x11, r24	; 17
	CTRL_PORT &= ~GLCD_RW;
 32e:	c1 98       	cbi	0x18, 1	; 24
	CTRL_PORT |= GLCD_RS;
 330:	c2 9a       	sbi	0x18, 2	; 24
	GLCD_DATA_PORT = dataToWrite;
 332:	c2 bb       	out	0x12, r28	; 18
	GLCD_EnableController(screen_x / 64);
 334:	80 91 cb 00 	lds	r24, 0x00CB
 338:	82 95       	swap	r24
 33a:	86 95       	lsr	r24
 33c:	86 95       	lsr	r24
 33e:	83 70       	andi	r24, 0x03	; 3
 340:	0e 94 39 01 	call	0x272	; 0x272 <GLCD_EnableController>
	CTRL_PORT |= GLCD_EN;
 344:	c0 9a       	sbi	0x18, 0	; 24
 346:	8f e3       	ldi	r24, 0x3F	; 63
 348:	96 e0       	ldi	r25, 0x06	; 6
 34a:	01 97       	sbiw	r24, 0x01	; 1
 34c:	f1 f7       	brne	.-4      	; 0x34a <GLCD_WriteData+0x38>
 34e:	00 c0       	rjmp	.+0      	; 0x350 <GLCD_WriteData+0x3e>
 350:	00 00       	nop
	GLCD_Delay();
	CTRL_PORT &= ~GLCD_EN;
 352:	c0 98       	cbi	0x18, 0	; 24
	GLCD_DisableController(screen_x / 64);
 354:	80 91 cb 00 	lds	r24, 0x00CB
 358:	82 95       	swap	r24
 35a:	86 95       	lsr	r24
 35c:	86 95       	lsr	r24
 35e:	83 70       	andi	r24, 0x03	; 3
 360:	0e 94 42 01 	call	0x284	; 0x284 <GLCD_DisableController>
	screen_x++;
 364:	80 91 cb 00 	lds	r24, 0x00CB
 368:	8f 5f       	subi	r24, 0xFF	; 255
 36a:	80 93 cb 00 	sts	0x00CB, r24
}
 36e:	cf 91       	pop	r28
 370:	08 95       	ret

00000372 <GLCD_InitalizePorts>:

/* Initialize the ports, specified in KS0108.h */
void GLCD_InitalizePorts(void)
{
	CTRL_DIR |= (GLCD_CS1 | GLCD_CS2 | GLCD_RS | GLCD_RW | GLCD_EN);
 372:	87 b3       	in	r24, 0x17	; 23
 374:	87 66       	ori	r24, 0x67	; 103
 376:	87 bb       	out	0x17, r24	; 23
	CTRL_PORT |= (GLCD_CS1 | GLCD_CS2);
 378:	88 b3       	in	r24, 0x18	; 24
 37a:	80 66       	ori	r24, 0x60	; 96
 37c:	88 bb       	out	0x18, r24	; 24
 37e:	08 95       	ret

00000380 <GLCD_Initalize>:
}

void GLCD_Initalize(void)
{
	unsigned char i;
	GLCD_InitalizePorts();
 380:	0e 94 b9 01 	call	0x372	; 0x372 <GLCD_InitalizePorts>
	for(i = 0; i < 3; i++)
		GLCD_WriteCommand((DISPLAY_ON_CMD | ON), i);
 384:	60 e0       	ldi	r22, 0x00	; 0
 386:	8f e3       	ldi	r24, 0x3F	; 63
 388:	0e 94 64 01 	call	0x2c8	; 0x2c8 <GLCD_WriteCommand>
 38c:	61 e0       	ldi	r22, 0x01	; 1
 38e:	8f e3       	ldi	r24, 0x3F	; 63
 390:	0e 94 64 01 	call	0x2c8	; 0x2c8 <GLCD_WriteCommand>
 394:	62 e0       	ldi	r22, 0x02	; 2
 396:	8f e3       	ldi	r24, 0x3F	; 63
 398:	0e 94 64 01 	call	0x2c8	; 0x2c8 <GLCD_WriteCommand>
 39c:	08 95       	ret

0000039e <GLCD_GoTo>:
}

void GLCD_GoTo(unsigned char x, unsigned char y)
{
 39e:	1f 93       	push	r17
 3a0:	cf 93       	push	r28
 3a2:	df 93       	push	r29
 3a4:	d8 2f       	mov	r29, r24
 3a6:	c6 2f       	mov	r28, r22
	unsigned char i;
	screen_x = x;
 3a8:	80 93 cb 00 	sts	0x00CB, r24
	screen_y = y;
 3ac:	60 93 ca 00 	sts	0x00CA, r22

	for(i = 0; i < GLCD_SCREEN_WIDTH/64; i++)
	{
		GLCD_WriteCommand(DISPLAY_SET_Y | 0,i);
 3b0:	60 e0       	ldi	r22, 0x00	; 0
 3b2:	80 e4       	ldi	r24, 0x40	; 64
 3b4:	0e 94 64 01 	call	0x2c8	; 0x2c8 <GLCD_WriteCommand>
		GLCD_WriteCommand(DISPLAY_SET_X | y,i);
 3b8:	c8 6b       	ori	r28, 0xB8	; 184
 3ba:	60 e0       	ldi	r22, 0x00	; 0
 3bc:	8c 2f       	mov	r24, r28
 3be:	0e 94 64 01 	call	0x2c8	; 0x2c8 <GLCD_WriteCommand>
		GLCD_WriteCommand(DISPLAY_START_LINE | 0,i);
 3c2:	60 e0       	ldi	r22, 0x00	; 0
 3c4:	80 ec       	ldi	r24, 0xC0	; 192
 3c6:	0e 94 64 01 	call	0x2c8	; 0x2c8 <GLCD_WriteCommand>
	screen_x = x;
	screen_y = y;

	for(i = 0; i < GLCD_SCREEN_WIDTH/64; i++)
	{
		GLCD_WriteCommand(DISPLAY_SET_Y | 0,i);
 3ca:	61 e0       	ldi	r22, 0x01	; 1
 3cc:	80 e4       	ldi	r24, 0x40	; 64
 3ce:	0e 94 64 01 	call	0x2c8	; 0x2c8 <GLCD_WriteCommand>
		GLCD_WriteCommand(DISPLAY_SET_X | y,i);
 3d2:	61 e0       	ldi	r22, 0x01	; 1
 3d4:	8c 2f       	mov	r24, r28
 3d6:	0e 94 64 01 	call	0x2c8	; 0x2c8 <GLCD_WriteCommand>
		GLCD_WriteCommand(DISPLAY_START_LINE | 0,i);
 3da:	61 e0       	ldi	r22, 0x01	; 1
 3dc:	80 ec       	ldi	r24, 0xC0	; 192
 3de:	0e 94 64 01 	call	0x2c8	; 0x2c8 <GLCD_WriteCommand>
	}
	GLCD_WriteCommand(DISPLAY_SET_Y | (x % 64), (x / 64));
 3e2:	1d 2f       	mov	r17, r29
 3e4:	12 95       	swap	r17
 3e6:	16 95       	lsr	r17
 3e8:	16 95       	lsr	r17
 3ea:	13 70       	andi	r17, 0x03	; 3
 3ec:	8d 2f       	mov	r24, r29
 3ee:	8f 73       	andi	r24, 0x3F	; 63
 3f0:	61 2f       	mov	r22, r17
 3f2:	80 64       	ori	r24, 0x40	; 64
 3f4:	0e 94 64 01 	call	0x2c8	; 0x2c8 <GLCD_WriteCommand>
	GLCD_WriteCommand(DISPLAY_SET_X | y, (x / 64));
 3f8:	61 2f       	mov	r22, r17
 3fa:	8c 2f       	mov	r24, r28
 3fc:	0e 94 64 01 	call	0x2c8	; 0x2c8 <GLCD_WriteCommand>
}
 400:	df 91       	pop	r29
 402:	cf 91       	pop	r28
 404:	1f 91       	pop	r17
 406:	08 95       	ret

00000408 <GLCD_ClearScreen>:

void GLCD_ClearScreen(void)
{
 408:	cf 93       	push	r28
 40a:	df 93       	push	r29
	unsigned char i, j;
	for(j = 0; j < GLCD_SCREEN_HEIGHT/8; j++)
 40c:	d0 e0       	ldi	r29, 0x00	; 0
	{
		GLCD_GoTo(0,j);
 40e:	6d 2f       	mov	r22, r29
 410:	80 e0       	ldi	r24, 0x00	; 0
 412:	0e 94 cf 01 	call	0x39e	; 0x39e <GLCD_GoTo>
 416:	c0 e0       	ldi	r28, 0x00	; 0
		for(i = 0; i < GLCD_SCREEN_WIDTH; i++)
		GLCD_WriteData(0x00);
 418:	80 e0       	ldi	r24, 0x00	; 0
 41a:	0e 94 89 01 	call	0x312	; 0x312 <GLCD_WriteData>
{
	unsigned char i, j;
	for(j = 0; j < GLCD_SCREEN_HEIGHT/8; j++)
	{
		GLCD_GoTo(0,j);
		for(i = 0; i < GLCD_SCREEN_WIDTH; i++)
 41e:	cf 5f       	subi	r28, 0xFF	; 255
 420:	c0 38       	cpi	r28, 0x80	; 128
 422:	d1 f7       	brne	.-12     	; 0x418 <GLCD_ClearScreen+0x10>
}

void GLCD_ClearScreen(void)
{
	unsigned char i, j;
	for(j = 0; j < GLCD_SCREEN_HEIGHT/8; j++)
 424:	df 5f       	subi	r29, 0xFF	; 255
 426:	d8 30       	cpi	r29, 0x08	; 8
 428:	91 f7       	brne	.-28     	; 0x40e <GLCD_ClearScreen+0x6>
	{
		GLCD_GoTo(0,j);
		for(i = 0; i < GLCD_SCREEN_WIDTH; i++)
		GLCD_WriteData(0x00);
	}
}
 42a:	df 91       	pop	r29
 42c:	cf 91       	pop	r28
 42e:	08 95       	ret

00000430 <GLCD_WriteChar>:

void GLCD_WriteChar(char charToWrite)
{
 430:	0f 93       	push	r16
 432:	1f 93       	push	r17
 434:	cf 93       	push	r28
 436:	df 93       	push	r29
	int i;
	charToWrite -= 32; 
 438:	80 52       	subi	r24, 0x20	; 32
	for(i = 0; i < 5; i++) 
		GLCD_WriteData(GLCD_ReadByteFromROMMemory((char *)((int)font5x8 + (5 * charToWrite) + i))); 
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	ec 01       	movw	r28, r24
 43e:	cc 0f       	add	r28, r28
 440:	dd 1f       	adc	r29, r29
 442:	cc 0f       	add	r28, r28
 444:	dd 1f       	adc	r29, r29
 446:	8c 0f       	add	r24, r28
 448:	9d 1f       	adc	r25, r29
 44a:	ec 01       	movw	r28, r24
 44c:	cc 5a       	subi	r28, 0xAC	; 172
 44e:	df 4f       	sbci	r29, 0xFF	; 255
 450:	8e 01       	movw	r16, r28
 452:	0b 5f       	subi	r16, 0xFB	; 251
 454:	1f 4f       	sbci	r17, 0xFF	; 255
	CTRL_PORT |= (GLCD_CS1 | GLCD_CS2);
}

unsigned char GLCD_ReadByteFromROMMemory(char * ptr)
{
	return pgm_read_byte(ptr);
 456:	fe 01       	movw	r30, r28
 458:	84 91       	lpm	r24, Z
void GLCD_WriteChar(char charToWrite)
{
	int i;
	charToWrite -= 32; 
	for(i = 0; i < 5; i++) 
		GLCD_WriteData(GLCD_ReadByteFromROMMemory((char *)((int)font5x8 + (5 * charToWrite) + i))); 
 45a:	0e 94 89 01 	call	0x312	; 0x312 <GLCD_WriteData>
 45e:	21 96       	adiw	r28, 0x01	; 1

void GLCD_WriteChar(char charToWrite)
{
	int i;
	charToWrite -= 32; 
	for(i = 0; i < 5; i++) 
 460:	c0 17       	cp	r28, r16
 462:	d1 07       	cpc	r29, r17
 464:	c1 f7       	brne	.-16     	; 0x456 <GLCD_WriteChar+0x26>
		GLCD_WriteData(GLCD_ReadByteFromROMMemory((char *)((int)font5x8 + (5 * charToWrite) + i))); 
	GLCD_WriteData(0x00);
 466:	80 e0       	ldi	r24, 0x00	; 0
 468:	0e 94 89 01 	call	0x312	; 0x312 <GLCD_WriteData>
}
 46c:	df 91       	pop	r29
 46e:	cf 91       	pop	r28
 470:	1f 91       	pop	r17
 472:	0f 91       	pop	r16
 474:	08 95       	ret

00000476 <GLCD_WriteString>:

void GLCD_WriteString(char * stringToWrite)
{
 476:	cf 93       	push	r28
 478:	df 93       	push	r29
 47a:	ec 01       	movw	r28, r24
	while(*stringToWrite)
 47c:	88 81       	ld	r24, Y
 47e:	88 23       	and	r24, r24
 480:	31 f0       	breq	.+12     	; 0x48e <GLCD_WriteString+0x18>
 482:	21 96       	adiw	r28, 0x01	; 1
		GLCD_WriteChar(*stringToWrite++);
 484:	0e 94 18 02 	call	0x430	; 0x430 <GLCD_WriteChar>
	GLCD_WriteData(0x00);
}

void GLCD_WriteString(char * stringToWrite)
{
	while(*stringToWrite)
 488:	89 91       	ld	r24, Y+
 48a:	81 11       	cpse	r24, r1
 48c:	fb cf       	rjmp	.-10     	; 0x484 <GLCD_WriteString+0xe>
		GLCD_WriteChar(*stringToWrite++);
}
 48e:	df 91       	pop	r29
 490:	cf 91       	pop	r28
 492:	08 95       	ret

00000494 <main>:
#include "KS0108.h"
#include "font5x8.h"

int main()
{	
	GLCD_Initalize();
 494:	0e 94 c0 01 	call	0x380	; 0x380 <GLCD_Initalize>
	
	while(1)
	{
		GLCD_ClearScreen();
 498:	0e 94 04 02 	call	0x408	; 0x408 <GLCD_ClearScreen>
		GLCD_GoTo(0,0);
 49c:	60 e0       	ldi	r22, 0x00	; 0
 49e:	80 e0       	ldi	r24, 0x00	; 0
 4a0:	0e 94 cf 01 	call	0x39e	; 0x39e <GLCD_GoTo>
		GLCD_WriteString(" #   #######  ######");
 4a4:	80 e6       	ldi	r24, 0x60	; 96
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	0e 94 3b 02 	call	0x476	; 0x476 <GLCD_WriteString>
		GLCD_GoTo(0,1);
 4ac:	61 e0       	ldi	r22, 0x01	; 1
 4ae:	80 e0       	ldi	r24, 0x00	; 0
 4b0:	0e 94 cf 01 	call	0x39e	; 0x39e <GLCD_GoTo>
		GLCD_WriteString(" #      #     #     ");
 4b4:	85 e7       	ldi	r24, 0x75	; 117
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	0e 94 3b 02 	call	0x476	; 0x476 <GLCD_WriteString>
		GLCD_GoTo(0,2);
 4bc:	62 e0       	ldi	r22, 0x02	; 2
 4be:	80 e0       	ldi	r24, 0x00	; 0
 4c0:	0e 94 cf 01 	call	0x39e	; 0x39e <GLCD_GoTo>
		GLCD_WriteString(" #      #     #     ");
 4c4:	85 e7       	ldi	r24, 0x75	; 117
 4c6:	90 e0       	ldi	r25, 0x00	; 0
 4c8:	0e 94 3b 02 	call	0x476	; 0x476 <GLCD_WriteString>
		GLCD_GoTo(0,3);
 4cc:	63 e0       	ldi	r22, 0x03	; 3
 4ce:	80 e0       	ldi	r24, 0x00	; 0
 4d0:	0e 94 cf 01 	call	0x39e	; 0x39e <GLCD_GoTo>
		GLCD_WriteString(" #      #     #_____");
 4d4:	8a e8       	ldi	r24, 0x8A	; 138
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	0e 94 3b 02 	call	0x476	; 0x476 <GLCD_WriteString>
		GLCD_GoTo(0,4);
 4dc:	64 e0       	ldi	r22, 0x04	; 4
 4de:	80 e0       	ldi	r24, 0x00	; 0
 4e0:	0e 94 cf 01 	call	0x39e	; 0x39e <GLCD_GoTo>
		GLCD_WriteString(" #      #          #");
 4e4:	8f e9       	ldi	r24, 0x9F	; 159
 4e6:	90 e0       	ldi	r25, 0x00	; 0
 4e8:	0e 94 3b 02 	call	0x476	; 0x476 <GLCD_WriteString>
		GLCD_GoTo(0,5);
 4ec:	65 e0       	ldi	r22, 0x05	; 5
 4ee:	80 e0       	ldi	r24, 0x00	; 0
 4f0:	0e 94 cf 01 	call	0x39e	; 0x39e <GLCD_GoTo>
		GLCD_WriteString(" #      #          #");
 4f4:	8f e9       	ldi	r24, 0x9F	; 159
 4f6:	90 e0       	ldi	r25, 0x00	; 0
 4f8:	0e 94 3b 02 	call	0x476	; 0x476 <GLCD_WriteString>
		GLCD_GoTo(0,6);
 4fc:	66 e0       	ldi	r22, 0x06	; 6
 4fe:	80 e0       	ldi	r24, 0x00	; 0
 500:	0e 94 cf 01 	call	0x39e	; 0x39e <GLCD_GoTo>
		GLCD_WriteString(" #      #          #");
 504:	8f e9       	ldi	r24, 0x9F	; 159
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	0e 94 3b 02 	call	0x476	; 0x476 <GLCD_WriteString>
		GLCD_GoTo(0,7);
 50c:	67 e0       	ldi	r22, 0x07	; 7
 50e:	80 e0       	ldi	r24, 0x00	; 0
 510:	0e 94 cf 01 	call	0x39e	; 0x39e <GLCD_GoTo>
		GLCD_WriteString(" #      #     ######");
 514:	84 eb       	ldi	r24, 0xB4	; 180
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	0e 94 3b 02 	call	0x476	; 0x476 <GLCD_WriteString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 51c:	2f ef       	ldi	r18, 0xFF	; 255
 51e:	89 e6       	ldi	r24, 0x69	; 105
 520:	98 e1       	ldi	r25, 0x18	; 24
 522:	21 50       	subi	r18, 0x01	; 1
 524:	80 40       	sbci	r24, 0x00	; 0
 526:	90 40       	sbci	r25, 0x00	; 0
 528:	e1 f7       	brne	.-8      	; 0x522 <main+0x8e>
 52a:	00 c0       	rjmp	.+0      	; 0x52c <main+0x98>
 52c:	00 00       	nop
 52e:	b4 cf       	rjmp	.-152    	; 0x498 <main+0x4>

00000530 <_exit>:
 530:	f8 94       	cli

00000532 <__stop_program>:
 532:	ff cf       	rjmp	.-2      	; 0x532 <__stop_program>
