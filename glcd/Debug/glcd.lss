
glcd.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000518  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009a  00800060  00000518  000005ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  008000fa  008000fa  00000646  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000646  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000678  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000128  00000000  00000000  000006b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001042  00000000  00000000  000007dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000004ee  00000000  00000000  0000181e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000048a  00000000  00000000  00001d0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002cc  00000000  00000000  00002198  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000433  00000000  00000000  00002464  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009e2  00000000  00000000  00002897  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  00003279  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 1a 01 	jmp	0x234	; 0x234 <__ctors_end>
   4:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
   8:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
   c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  10:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  14:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  18:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  1c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  20:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  24:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  28:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  2c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  30:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  34:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  38:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  3c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  40:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  44:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  48:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  4c:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>
  50:	0c 94 37 01 	jmp	0x26e	; 0x26e <__bad_interrupt>

00000054 <__trampolines_end>:
  54:	00 00       	nop
  56:	00 00       	nop
  58:	00 00       	nop
  5a:	00 5f       	subi	r16, 0xF0	; 240
  5c:	00 00       	nop
  5e:	00 07       	cpc	r16, r16
  60:	00 07       	cpc	r16, r16
  62:	00 14       	cp	r0, r0
  64:	7f 14       	cp	r7, r15
  66:	7f 14       	cp	r7, r15
  68:	24 2a       	or	r2, r20
  6a:	7f 2a       	or	r7, r31
  6c:	12 23       	and	r17, r18
  6e:	13 08       	sbc	r1, r3
  70:	64 62       	ori	r22, 0x24	; 36
  72:	36 49       	sbci	r19, 0x96	; 150
  74:	55 22       	and	r5, r21
  76:	50 00       	.word	0x0050	; ????
  78:	05 03       	mulsu	r16, r21
  7a:	00 00       	nop
  7c:	00 1c       	adc	r0, r0
  7e:	22 41       	sbci	r18, 0x12	; 18
  80:	00 00       	nop
  82:	41 22       	and	r4, r17
  84:	1c 00       	.word	0x001c	; ????
  86:	08 2a       	or	r0, r24
  88:	1c 2a       	or	r1, r28
  8a:	08 08       	sbc	r0, r8
  8c:	08 3e       	cpi	r16, 0xE8	; 232
  8e:	08 08       	sbc	r0, r8
  90:	00 50       	subi	r16, 0x00	; 0
  92:	30 00       	.word	0x0030	; ????
  94:	00 08       	sbc	r0, r0
  96:	08 08       	sbc	r0, r8
  98:	08 08       	sbc	r0, r8
  9a:	00 30       	cpi	r16, 0x00	; 0
  9c:	30 00       	.word	0x0030	; ????
  9e:	00 20       	and	r0, r0
  a0:	10 08       	sbc	r1, r0
  a2:	04 02       	muls	r16, r20
  a4:	3e 51       	subi	r19, 0x1E	; 30
  a6:	49 45       	sbci	r20, 0x59	; 89
  a8:	3e 00       	.word	0x003e	; ????
  aa:	42 7f       	andi	r20, 0xF2	; 242
  ac:	40 00       	.word	0x0040	; ????
  ae:	42 61       	ori	r20, 0x12	; 18
  b0:	51 49       	sbci	r21, 0x91	; 145
  b2:	46 21       	and	r20, r6
  b4:	41 45       	sbci	r20, 0x51	; 81
  b6:	4b 31       	cpi	r20, 0x1B	; 27
  b8:	18 14       	cp	r1, r8
  ba:	12 7f       	andi	r17, 0xF2	; 242
  bc:	10 27       	eor	r17, r16
  be:	45 45       	sbci	r20, 0x55	; 85
  c0:	45 39       	cpi	r20, 0x95	; 149
  c2:	3c 4a       	sbci	r19, 0xAC	; 172
  c4:	49 49       	sbci	r20, 0x99	; 153
  c6:	30 01       	movw	r6, r0
  c8:	71 09       	sbc	r23, r1
  ca:	05 03       	mulsu	r16, r21
  cc:	36 49       	sbci	r19, 0x96	; 150
  ce:	49 49       	sbci	r20, 0x99	; 153
  d0:	36 06       	cpc	r3, r22
  d2:	49 49       	sbci	r20, 0x99	; 153
  d4:	29 1e       	adc	r2, r25
  d6:	00 36       	cpi	r16, 0x60	; 96
  d8:	36 00       	.word	0x0036	; ????
  da:	00 00       	nop
  dc:	56 36       	cpi	r21, 0x66	; 102
  de:	00 00       	nop
  e0:	00 08       	sbc	r0, r0
  e2:	14 22       	and	r1, r20
  e4:	41 14       	cp	r4, r1
  e6:	14 14       	cp	r1, r4
  e8:	14 14       	cp	r1, r4
  ea:	41 22       	and	r4, r17
  ec:	14 08       	sbc	r1, r4
  ee:	00 02       	muls	r16, r16
  f0:	01 51       	subi	r16, 0x11	; 17
  f2:	09 06       	cpc	r0, r25
  f4:	32 49       	sbci	r19, 0x92	; 146
  f6:	79 41       	sbci	r23, 0x19	; 25
  f8:	3e 7e       	andi	r19, 0xEE	; 238
  fa:	11 11       	cpse	r17, r1
  fc:	11 7e       	andi	r17, 0xE1	; 225
  fe:	7f 49       	sbci	r23, 0x9F	; 159
 100:	49 49       	sbci	r20, 0x99	; 153
 102:	36 3e       	cpi	r19, 0xE6	; 230
 104:	41 41       	sbci	r20, 0x11	; 17
 106:	41 22       	and	r4, r17
 108:	7f 41       	sbci	r23, 0x1F	; 31
 10a:	41 22       	and	r4, r17
 10c:	1c 7f       	andi	r17, 0xFC	; 252
 10e:	49 49       	sbci	r20, 0x99	; 153
 110:	49 41       	sbci	r20, 0x19	; 25
 112:	7f 09       	sbc	r23, r15
 114:	09 01       	movw	r0, r18
 116:	01 3e       	cpi	r16, 0xE1	; 225
 118:	41 41       	sbci	r20, 0x11	; 17
 11a:	51 32       	cpi	r21, 0x21	; 33
 11c:	7f 08       	sbc	r7, r15
 11e:	08 08       	sbc	r0, r8
 120:	7f 00       	.word	0x007f	; ????
 122:	41 7f       	andi	r20, 0xF1	; 241
 124:	41 00       	.word	0x0041	; ????
 126:	20 40       	sbci	r18, 0x00	; 0
 128:	41 3f       	cpi	r20, 0xF1	; 241
 12a:	01 7f       	andi	r16, 0xF1	; 241
 12c:	08 14       	cp	r0, r8
 12e:	22 41       	sbci	r18, 0x12	; 18
 130:	7f 40       	sbci	r23, 0x0F	; 15
 132:	40 40       	sbci	r20, 0x00	; 0
 134:	40 7f       	andi	r20, 0xF0	; 240
 136:	02 04       	cpc	r0, r2
 138:	02 7f       	andi	r16, 0xF2	; 242
 13a:	7f 04       	cpc	r7, r15
 13c:	08 10       	cpse	r0, r8
 13e:	7f 3e       	cpi	r23, 0xEF	; 239
 140:	41 41       	sbci	r20, 0x11	; 17
 142:	41 3e       	cpi	r20, 0xE1	; 225
 144:	7f 09       	sbc	r23, r15
 146:	09 09       	sbc	r16, r9
 148:	06 3e       	cpi	r16, 0xE6	; 230
 14a:	41 51       	subi	r20, 0x11	; 17
 14c:	21 5e       	subi	r18, 0xE1	; 225
 14e:	7f 09       	sbc	r23, r15
 150:	19 29       	or	r17, r9
 152:	46 46       	sbci	r20, 0x66	; 102
 154:	49 49       	sbci	r20, 0x99	; 153
 156:	49 31       	cpi	r20, 0x19	; 25
 158:	01 01       	movw	r0, r2
 15a:	7f 01       	movw	r14, r30
 15c:	01 3f       	cpi	r16, 0xF1	; 241
 15e:	40 40       	sbci	r20, 0x00	; 0
 160:	40 3f       	cpi	r20, 0xF0	; 240
 162:	1f 20       	and	r1, r15
 164:	40 20       	and	r4, r0
 166:	1f 7f       	andi	r17, 0xFF	; 255
 168:	20 18       	sub	r2, r0
 16a:	20 7f       	andi	r18, 0xF0	; 240
 16c:	63 14       	cp	r6, r3
 16e:	08 14       	cp	r0, r8
 170:	63 03       	mulsu	r22, r19
 172:	04 78       	andi	r16, 0x84	; 132
 174:	04 03       	mulsu	r16, r20
 176:	61 51       	subi	r22, 0x11	; 17
 178:	49 45       	sbci	r20, 0x59	; 89
 17a:	43 00       	.word	0x0043	; ????
 17c:	00 7f       	andi	r16, 0xF0	; 240
 17e:	41 41       	sbci	r20, 0x11	; 17
 180:	02 04       	cpc	r0, r2
 182:	08 10       	cpse	r0, r8
 184:	20 41       	sbci	r18, 0x10	; 16
 186:	41 7f       	andi	r20, 0xF1	; 241
 188:	00 00       	nop
 18a:	04 02       	muls	r16, r20
 18c:	01 02       	muls	r16, r17
 18e:	04 40       	sbci	r16, 0x04	; 4
 190:	40 40       	sbci	r20, 0x00	; 0
 192:	40 40       	sbci	r20, 0x00	; 0
 194:	00 01       	movw	r0, r0
 196:	02 04       	cpc	r0, r2
 198:	00 20       	and	r0, r0
 19a:	54 54       	subi	r21, 0x44	; 68
 19c:	54 78       	andi	r21, 0x84	; 132
 19e:	7f 48       	sbci	r23, 0x8F	; 143
 1a0:	44 44       	sbci	r20, 0x44	; 68
 1a2:	38 38       	cpi	r19, 0x88	; 136
 1a4:	44 44       	sbci	r20, 0x44	; 68
 1a6:	44 20       	and	r4, r4
 1a8:	38 44       	sbci	r19, 0x48	; 72
 1aa:	44 48       	sbci	r20, 0x84	; 132
 1ac:	7f 38       	cpi	r23, 0x8F	; 143
 1ae:	54 54       	subi	r21, 0x44	; 68
 1b0:	54 18       	sub	r5, r4
 1b2:	08 7e       	andi	r16, 0xE8	; 232
 1b4:	09 01       	movw	r0, r18
 1b6:	02 08       	sbc	r0, r2
 1b8:	14 54       	subi	r17, 0x44	; 68
 1ba:	54 3c       	cpi	r21, 0xC4	; 196
 1bc:	7f 08       	sbc	r7, r15
 1be:	04 04       	cpc	r0, r4
 1c0:	78 00       	.word	0x0078	; ????
 1c2:	44 7d       	andi	r20, 0xD4	; 212
 1c4:	40 00       	.word	0x0040	; ????
 1c6:	20 40       	sbci	r18, 0x00	; 0
 1c8:	44 3d       	cpi	r20, 0xD4	; 212
 1ca:	00 00       	nop
 1cc:	7f 10       	cpse	r7, r15
 1ce:	28 44       	sbci	r18, 0x48	; 72
 1d0:	00 41       	sbci	r16, 0x10	; 16
 1d2:	7f 40       	sbci	r23, 0x0F	; 15
 1d4:	00 7c       	andi	r16, 0xC0	; 192
 1d6:	04 18       	sub	r0, r4
 1d8:	04 78       	andi	r16, 0x84	; 132
 1da:	7c 08       	sbc	r7, r12
 1dc:	04 04       	cpc	r0, r4
 1de:	78 38       	cpi	r23, 0x88	; 136
 1e0:	44 44       	sbci	r20, 0x44	; 68
 1e2:	44 38       	cpi	r20, 0x84	; 132
 1e4:	7c 14       	cp	r7, r12
 1e6:	14 14       	cp	r1, r4
 1e8:	08 08       	sbc	r0, r8
 1ea:	14 14       	cp	r1, r4
 1ec:	18 7c       	andi	r17, 0xC8	; 200
 1ee:	7c 08       	sbc	r7, r12
 1f0:	04 04       	cpc	r0, r4
 1f2:	08 48       	sbci	r16, 0x88	; 136
 1f4:	54 54       	subi	r21, 0x44	; 68
 1f6:	54 20       	and	r5, r4
 1f8:	04 3f       	cpi	r16, 0xF4	; 244
 1fa:	44 40       	sbci	r20, 0x04	; 4
 1fc:	20 3c       	cpi	r18, 0xC0	; 192
 1fe:	40 40       	sbci	r20, 0x00	; 0
 200:	20 7c       	andi	r18, 0xC0	; 192
 202:	1c 20       	and	r1, r12
 204:	40 20       	and	r4, r0
 206:	1c 3c       	cpi	r17, 0xCC	; 204
 208:	40 30       	cpi	r20, 0x00	; 0
 20a:	40 3c       	cpi	r20, 0xC0	; 192
 20c:	44 28       	or	r4, r4
 20e:	10 28       	or	r1, r0
 210:	44 0c       	add	r4, r4
 212:	50 50       	subi	r21, 0x00	; 0
 214:	50 3c       	cpi	r21, 0xC0	; 192
 216:	44 64       	ori	r20, 0x44	; 68
 218:	54 4c       	sbci	r21, 0xC4	; 196
 21a:	44 00       	.word	0x0044	; ????
 21c:	08 36       	cpi	r16, 0x68	; 104
 21e:	41 00       	.word	0x0041	; ????
 220:	00 00       	nop
 222:	7f 00       	.word	0x007f	; ????
 224:	00 00       	nop
 226:	41 36       	cpi	r20, 0x61	; 97
 228:	08 00       	.word	0x0008	; ????
 22a:	08 08       	sbc	r0, r8
 22c:	2a 1c       	adc	r2, r10
 22e:	08 08       	sbc	r0, r8
 230:	1c 2a       	or	r1, r28
 232:	08 08       	sbc	r0, r8

00000234 <__ctors_end>:
 234:	11 24       	eor	r1, r1
 236:	1f be       	out	0x3f, r1	; 63
 238:	cf e5       	ldi	r28, 0x5F	; 95
 23a:	d8 e0       	ldi	r29, 0x08	; 8
 23c:	de bf       	out	0x3e, r29	; 62
 23e:	cd bf       	out	0x3d, r28	; 61

00000240 <__do_copy_data>:
 240:	10 e0       	ldi	r17, 0x00	; 0
 242:	a0 e6       	ldi	r26, 0x60	; 96
 244:	b0 e0       	ldi	r27, 0x00	; 0
 246:	e8 e1       	ldi	r30, 0x18	; 24
 248:	f5 e0       	ldi	r31, 0x05	; 5
 24a:	02 c0       	rjmp	.+4      	; 0x250 <__do_copy_data+0x10>
 24c:	05 90       	lpm	r0, Z+
 24e:	0d 92       	st	X+, r0
 250:	aa 3f       	cpi	r26, 0xFA	; 250
 252:	b1 07       	cpc	r27, r17
 254:	d9 f7       	brne	.-10     	; 0x24c <__do_copy_data+0xc>

00000256 <__do_clear_bss>:
 256:	20 e0       	ldi	r18, 0x00	; 0
 258:	aa ef       	ldi	r26, 0xFA	; 250
 25a:	b0 e0       	ldi	r27, 0x00	; 0
 25c:	01 c0       	rjmp	.+2      	; 0x260 <.do_clear_bss_start>

0000025e <.do_clear_bss_loop>:
 25e:	1d 92       	st	X+, r1

00000260 <.do_clear_bss_start>:
 260:	ac 3f       	cpi	r26, 0xFC	; 252
 262:	b2 07       	cpc	r27, r18
 264:	e1 f7       	brne	.-8      	; 0x25e <.do_clear_bss_loop>
 266:	0e 94 45 02 	call	0x48a	; 0x48a <main>
 26a:	0c 94 8a 02 	jmp	0x514	; 0x514 <_exit>

0000026e <__bad_interrupt>:
 26e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000272 <GLCD_EnableController>:
//-------------------------------------------------------------------------------------------------
// Enalbe Controller (0-2)
//-------------------------------------------------------------------------------------------------
void GLCD_EnableController(unsigned char controller)
{
switch(controller){
 272:	81 30       	cpi	r24, 0x01	; 1
 274:	31 f0       	breq	.+12     	; 0x282 <GLCD_EnableController+0x10>
 276:	18 f0       	brcs	.+6      	; 0x27e <GLCD_EnableController+0xc>
 278:	82 30       	cpi	r24, 0x02	; 2
 27a:	29 f0       	breq	.+10     	; 0x286 <GLCD_EnableController+0x14>
 27c:	08 95       	ret
	case 0 : KS0108_CTRL_PORT &= ~KS0108_CS1; break;
 27e:	c6 98       	cbi	0x18, 6	; 24
 280:	08 95       	ret
	case 1 : KS0108_CTRL_PORT &= ~KS0108_CS2; break;
 282:	c5 98       	cbi	0x18, 5	; 24
 284:	08 95       	ret
	case 2 : KS0108_CTRL_PORT &= ~KS0108_CS3; break;
 286:	c7 98       	cbi	0x18, 7	; 24
 288:	08 95       	ret

0000028a <GLCD_DisableController>:
//-------------------------------------------------------------------------------------------------
// Disable Controller (0-2)
//-------------------------------------------------------------------------------------------------
void GLCD_DisableController(unsigned char controller)
{
switch(controller){
 28a:	81 30       	cpi	r24, 0x01	; 1
 28c:	31 f0       	breq	.+12     	; 0x29a <GLCD_DisableController+0x10>
 28e:	18 f0       	brcs	.+6      	; 0x296 <GLCD_DisableController+0xc>
 290:	82 30       	cpi	r24, 0x02	; 2
 292:	29 f0       	breq	.+10     	; 0x29e <GLCD_DisableController+0x14>
 294:	08 95       	ret
	case 0 : KS0108_CTRL_PORT |= KS0108_CS1; break;
 296:	c6 9a       	sbi	0x18, 6	; 24
 298:	08 95       	ret
	case 1 : KS0108_CTRL_PORT |= KS0108_CS2; break;
 29a:	c5 9a       	sbi	0x18, 5	; 24
 29c:	08 95       	ret
	case 2 : KS0108_CTRL_PORT |= KS0108_CS3; break;
 29e:	c7 9a       	sbi	0x18, 7	; 24
 2a0:	08 95       	ret

000002a2 <GLCD_ReadStatus>:
}
//-------------------------------------------------------------------------------------------------
// Read Status from specified controller (0-2)
//-------------------------------------------------------------------------------------------------
unsigned char GLCD_ReadStatus(unsigned char controller)
{
 2a2:	cf 93       	push	r28
 2a4:	df 93       	push	r29
 2a6:	c8 2f       	mov	r28, r24
unsigned char status;
KS0108_DATA_DIR = 0x00;
 2a8:	11 ba       	out	0x11, r1	; 17
KS0108_DATA_PORT = 0x00;
 2aa:	12 ba       	out	0x12, r1	; 18
KS0108_CTRL_PORT |= KS0108_RW;
 2ac:	c1 9a       	sbi	0x18, 1	; 24
KS0108_CTRL_PORT &= ~KS0108_RS;
 2ae:	c2 98       	cbi	0x18, 2	; 24
GLCD_EnableController(controller);
 2b0:	0e 94 39 01 	call	0x272	; 0x272 <GLCD_EnableController>
KS0108_CTRL_PORT |= KS0108_EN;
 2b4:	c0 9a       	sbi	0x18, 0	; 24
// Delay function
//-------------------------------------------------------------------------------------------------
void GLCD_Delay(void)
{

	asm("nop");
 2b6:	00 00       	nop
KS0108_CTRL_PORT |= KS0108_RW;
KS0108_CTRL_PORT &= ~KS0108_RS;
GLCD_EnableController(controller);
KS0108_CTRL_PORT |= KS0108_EN;
GLCD_Delay();
status = KS0108_DATA_PIN;
 2b8:	d0 b3       	in	r29, 0x10	; 16
KS0108_CTRL_PORT &= ~KS0108_EN;
 2ba:	c0 98       	cbi	0x18, 0	; 24
GLCD_DisableController(controller);
 2bc:	8c 2f       	mov	r24, r28
 2be:	0e 94 45 01 	call	0x28a	; 0x28a <GLCD_DisableController>
return status;
}
 2c2:	8d 2f       	mov	r24, r29
 2c4:	df 91       	pop	r29
 2c6:	cf 91       	pop	r28
 2c8:	08 95       	ret

000002ca <GLCD_WriteCommand>:
//-------------------------------------------------------------------------------------------------
// Write command to specified controller
//-------------------------------------------------------------------------------------------------
void GLCD_WriteCommand(unsigned char commandToWrite, unsigned char controller)
{
 2ca:	cf 93       	push	r28
 2cc:	df 93       	push	r29
 2ce:	d8 2f       	mov	r29, r24
 2d0:	c6 2f       	mov	r28, r22
	char t = GLCD_ReadStatus(controller);
 2d2:	86 2f       	mov	r24, r22
 2d4:	0e 94 51 01 	call	0x2a2	; 0x2a2 <GLCD_ReadStatus>
while(t&DISPLAY_STATUS_BUSY){
 2d8:	88 23       	and	r24, r24
 2da:	2c f4       	brge	.+10     	; 0x2e6 <GLCD_WriteCommand+0x1c>
	t = GLCD_ReadStatus(controller);
 2dc:	8c 2f       	mov	r24, r28
 2de:	0e 94 51 01 	call	0x2a2	; 0x2a2 <GLCD_ReadStatus>
// Write command to specified controller
//-------------------------------------------------------------------------------------------------
void GLCD_WriteCommand(unsigned char commandToWrite, unsigned char controller)
{
	char t = GLCD_ReadStatus(controller);
while(t&DISPLAY_STATUS_BUSY){
 2e2:	88 23       	and	r24, r24
 2e4:	dc f3       	brlt	.-10     	; 0x2dc <GLCD_WriteCommand+0x12>
	t = GLCD_ReadStatus(controller);
}
KS0108_DATA_DIR = 0xFF;
 2e6:	8f ef       	ldi	r24, 0xFF	; 255
 2e8:	81 bb       	out	0x11, r24	; 17
KS0108_CTRL_PORT &= ~(KS0108_RW | KS0108_RS);
 2ea:	98 b3       	in	r25, 0x18	; 24
 2ec:	99 7f       	andi	r25, 0xF9	; 249
 2ee:	98 bb       	out	0x18, r25	; 24
GLCD_EnableController(controller);
 2f0:	8c 2f       	mov	r24, r28
 2f2:	0e 94 39 01 	call	0x272	; 0x272 <GLCD_EnableController>
KS0108_DATA_PORT = commandToWrite;
 2f6:	d2 bb       	out	0x12, r29	; 18
KS0108_CTRL_PORT |= KS0108_EN;
 2f8:	c0 9a       	sbi	0x18, 0	; 24
// Delay function
//-------------------------------------------------------------------------------------------------
void GLCD_Delay(void)
{

	asm("nop");
 2fa:	00 00       	nop
KS0108_CTRL_PORT &= ~(KS0108_RW | KS0108_RS);
GLCD_EnableController(controller);
KS0108_DATA_PORT = commandToWrite;
KS0108_CTRL_PORT |= KS0108_EN;
GLCD_Delay();
KS0108_CTRL_PORT &= ~KS0108_EN;
 2fc:	c0 98       	cbi	0x18, 0	; 24
GLCD_DisableController(controller);
 2fe:	8c 2f       	mov	r24, r28
 300:	0e 94 45 01 	call	0x28a	; 0x28a <GLCD_DisableController>
}
 304:	df 91       	pop	r29
 306:	cf 91       	pop	r28
 308:	08 95       	ret

0000030a <GLCD_WriteData>:
}
//-------------------------------------------------------------------------------------------------
// Write data to current position
//-------------------------------------------------------------------------------------------------
void GLCD_WriteData(unsigned char dataToWrite)
{
 30a:	cf 93       	push	r28
 30c:	c8 2f       	mov	r28, r24
while(GLCD_ReadStatus(screen_x / 64)&DISPLAY_STATUS_BUSY);
 30e:	80 91 fb 00 	lds	r24, 0x00FB
 312:	82 95       	swap	r24
 314:	86 95       	lsr	r24
 316:	86 95       	lsr	r24
 318:	83 70       	andi	r24, 0x03	; 3
 31a:	0e 94 51 01 	call	0x2a2	; 0x2a2 <GLCD_ReadStatus>
 31e:	88 23       	and	r24, r24
 320:	b4 f3       	brlt	.-20     	; 0x30e <GLCD_WriteData+0x4>
KS0108_DATA_DIR = 0xFF;
 322:	8f ef       	ldi	r24, 0xFF	; 255
 324:	81 bb       	out	0x11, r24	; 17
KS0108_CTRL_PORT &= ~KS0108_RW;
 326:	c1 98       	cbi	0x18, 1	; 24
KS0108_CTRL_PORT |= KS0108_RS;
 328:	c2 9a       	sbi	0x18, 2	; 24
KS0108_DATA_PORT = dataToWrite;
 32a:	c2 bb       	out	0x12, r28	; 18
GLCD_EnableController(screen_x / 64);
 32c:	80 91 fb 00 	lds	r24, 0x00FB
 330:	82 95       	swap	r24
 332:	86 95       	lsr	r24
 334:	86 95       	lsr	r24
 336:	83 70       	andi	r24, 0x03	; 3
 338:	0e 94 39 01 	call	0x272	; 0x272 <GLCD_EnableController>
KS0108_CTRL_PORT |= KS0108_EN;
 33c:	c0 9a       	sbi	0x18, 0	; 24
// Delay function
//-------------------------------------------------------------------------------------------------
void GLCD_Delay(void)
{

	asm("nop");
 33e:	00 00       	nop
KS0108_CTRL_PORT |= KS0108_RS;
KS0108_DATA_PORT = dataToWrite;
GLCD_EnableController(screen_x / 64);
KS0108_CTRL_PORT |= KS0108_EN;
GLCD_Delay();
KS0108_CTRL_PORT &= ~KS0108_EN;
 340:	c0 98       	cbi	0x18, 0	; 24
GLCD_DisableController(screen_x / 64);
 342:	80 91 fb 00 	lds	r24, 0x00FB
 346:	82 95       	swap	r24
 348:	86 95       	lsr	r24
 34a:	86 95       	lsr	r24
 34c:	83 70       	andi	r24, 0x03	; 3
 34e:	0e 94 45 01 	call	0x28a	; 0x28a <GLCD_DisableController>
screen_x++;
 352:	80 91 fb 00 	lds	r24, 0x00FB
 356:	8f 5f       	subi	r24, 0xFF	; 255
 358:	80 93 fb 00 	sts	0x00FB, r24
}
 35c:	cf 91       	pop	r28
 35e:	08 95       	ret

00000360 <GLCD_InitalizePorts>:
//-------------------------------------------------------------------------------------------------
//
//-------------------------------------------------------------------------------------------------
void GLCD_InitalizePorts(void)
{
KS0108_CTRL_DIR |= (KS0108_CS1 | KS0108_CS2 | KS0108_CS3 | KS0108_RS | KS0108_RW | KS0108_EN);
 360:	87 b3       	in	r24, 0x17	; 23
 362:	87 6e       	ori	r24, 0xE7	; 231
 364:	87 bb       	out	0x17, r24	; 23
KS0108_CTRL_PORT |= (KS0108_CS1 | KS0108_CS2 | KS0108_CS3);
 366:	88 b3       	in	r24, 0x18	; 24
 368:	80 6e       	ori	r24, 0xE0	; 224
 36a:	88 bb       	out	0x18, r24	; 24
 36c:	08 95       	ret

0000036e <GLCD_ReadByteFromROMMemory>:
//-------------------------------------------------------------------------------------------------
//
//-------------------------------------------------------------------------------------------------
unsigned char GLCD_ReadByteFromROMMemory(char * ptr)
{
return pgm_read_byte(ptr);
 36e:	fc 01       	movw	r30, r24
 370:	84 91       	lpm	r24, Z
}
 372:	08 95       	ret

00000374 <GLCD_Initalize>:
//
//-------------------------------------------------------------------------------------------------
void GLCD_Initalize(void)
{
unsigned char i;
GLCD_InitalizePorts();
 374:	0e 94 b0 01 	call	0x360	; 0x360 <GLCD_InitalizePorts>
for(i = 0; i < 3; i++)
  GLCD_WriteCommand((DISPLAY_ON_CMD | ON), i);
 378:	60 e0       	ldi	r22, 0x00	; 0
 37a:	8f e3       	ldi	r24, 0x3F	; 63
 37c:	0e 94 65 01 	call	0x2ca	; 0x2ca <GLCD_WriteCommand>
 380:	61 e0       	ldi	r22, 0x01	; 1
 382:	8f e3       	ldi	r24, 0x3F	; 63
 384:	0e 94 65 01 	call	0x2ca	; 0x2ca <GLCD_WriteCommand>
 388:	62 e0       	ldi	r22, 0x02	; 2
 38a:	8f e3       	ldi	r24, 0x3F	; 63
 38c:	0e 94 65 01 	call	0x2ca	; 0x2ca <GLCD_WriteCommand>
 390:	08 95       	ret

00000392 <GLCD_GoTo>:
}
//-------------------------------------------------------------------------------------------------
//
//-------------------------------------------------------------------------------------------------
void GLCD_GoTo(unsigned char x, unsigned char y)
{
 392:	1f 93       	push	r17
 394:	cf 93       	push	r28
 396:	df 93       	push	r29
 398:	d8 2f       	mov	r29, r24
 39a:	c6 2f       	mov	r28, r22
unsigned char i;
screen_x = x;
 39c:	80 93 fb 00 	sts	0x00FB, r24
screen_y = y;
 3a0:	60 93 fa 00 	sts	0x00FA, r22

for(i = 0; i < KS0108_SCREEN_WIDTH/64; i++)
  {
  GLCD_WriteCommand(DISPLAY_SET_Y | 0,i);
 3a4:	60 e0       	ldi	r22, 0x00	; 0
 3a6:	80 e4       	ldi	r24, 0x40	; 64
 3a8:	0e 94 65 01 	call	0x2ca	; 0x2ca <GLCD_WriteCommand>
  GLCD_WriteCommand(DISPLAY_SET_X | y,i);
 3ac:	c8 6b       	ori	r28, 0xB8	; 184
 3ae:	60 e0       	ldi	r22, 0x00	; 0
 3b0:	8c 2f       	mov	r24, r28
 3b2:	0e 94 65 01 	call	0x2ca	; 0x2ca <GLCD_WriteCommand>
  GLCD_WriteCommand(DISPLAY_START_LINE | 0,i);
 3b6:	60 e0       	ldi	r22, 0x00	; 0
 3b8:	80 ec       	ldi	r24, 0xC0	; 192
 3ba:	0e 94 65 01 	call	0x2ca	; 0x2ca <GLCD_WriteCommand>
screen_x = x;
screen_y = y;

for(i = 0; i < KS0108_SCREEN_WIDTH/64; i++)
  {
  GLCD_WriteCommand(DISPLAY_SET_Y | 0,i);
 3be:	61 e0       	ldi	r22, 0x01	; 1
 3c0:	80 e4       	ldi	r24, 0x40	; 64
 3c2:	0e 94 65 01 	call	0x2ca	; 0x2ca <GLCD_WriteCommand>
  GLCD_WriteCommand(DISPLAY_SET_X | y,i);
 3c6:	61 e0       	ldi	r22, 0x01	; 1
 3c8:	8c 2f       	mov	r24, r28
 3ca:	0e 94 65 01 	call	0x2ca	; 0x2ca <GLCD_WriteCommand>
  GLCD_WriteCommand(DISPLAY_START_LINE | 0,i);
 3ce:	61 e0       	ldi	r22, 0x01	; 1
 3d0:	80 ec       	ldi	r24, 0xC0	; 192
 3d2:	0e 94 65 01 	call	0x2ca	; 0x2ca <GLCD_WriteCommand>
  }
GLCD_WriteCommand(DISPLAY_SET_Y | (x % 64), (x / 64));
 3d6:	1d 2f       	mov	r17, r29
 3d8:	12 95       	swap	r17
 3da:	16 95       	lsr	r17
 3dc:	16 95       	lsr	r17
 3de:	13 70       	andi	r17, 0x03	; 3
 3e0:	8d 2f       	mov	r24, r29
 3e2:	8f 73       	andi	r24, 0x3F	; 63
 3e4:	61 2f       	mov	r22, r17
 3e6:	80 64       	ori	r24, 0x40	; 64
 3e8:	0e 94 65 01 	call	0x2ca	; 0x2ca <GLCD_WriteCommand>
GLCD_WriteCommand(DISPLAY_SET_X | y, (x / 64));
 3ec:	61 2f       	mov	r22, r17
 3ee:	8c 2f       	mov	r24, r28
 3f0:	0e 94 65 01 	call	0x2ca	; 0x2ca <GLCD_WriteCommand>
}
 3f4:	df 91       	pop	r29
 3f6:	cf 91       	pop	r28
 3f8:	1f 91       	pop	r17
 3fa:	08 95       	ret

000003fc <GLCD_ClearScreen>:
//-------------------------------------------------------------------------------------------------
//
//-------------------------------------------------------------------------------------------------
void GLCD_ClearScreen(void)
{
 3fc:	cf 93       	push	r28
 3fe:	df 93       	push	r29
unsigned char i, j;
for(j = 0; j < KS0108_SCREEN_HEIGHT/8; j++)
 400:	d0 e0       	ldi	r29, 0x00	; 0
  {
  GLCD_GoTo(0,j);
 402:	6d 2f       	mov	r22, r29
 404:	80 e0       	ldi	r24, 0x00	; 0
 406:	0e 94 c9 01 	call	0x392	; 0x392 <GLCD_GoTo>
 40a:	c0 e0       	ldi	r28, 0x00	; 0
  for(i = 0; i < KS0108_SCREEN_WIDTH; i++)
    GLCD_WriteData(0x00);
 40c:	80 e0       	ldi	r24, 0x00	; 0
 40e:	0e 94 85 01 	call	0x30a	; 0x30a <GLCD_WriteData>
{
unsigned char i, j;
for(j = 0; j < KS0108_SCREEN_HEIGHT/8; j++)
  {
  GLCD_GoTo(0,j);
  for(i = 0; i < KS0108_SCREEN_WIDTH; i++)
 412:	cf 5f       	subi	r28, 0xFF	; 255
 414:	c0 38       	cpi	r28, 0x80	; 128
 416:	d1 f7       	brne	.-12     	; 0x40c <GLCD_ClearScreen+0x10>
//
//-------------------------------------------------------------------------------------------------
void GLCD_ClearScreen(void)
{
unsigned char i, j;
for(j = 0; j < KS0108_SCREEN_HEIGHT/8; j++)
 418:	df 5f       	subi	r29, 0xFF	; 255
 41a:	d8 30       	cpi	r29, 0x08	; 8
 41c:	91 f7       	brne	.-28     	; 0x402 <GLCD_ClearScreen+0x6>
  {
  GLCD_GoTo(0,j);
  for(i = 0; i < KS0108_SCREEN_WIDTH; i++)
    GLCD_WriteData(0x00);
  }
}
 41e:	df 91       	pop	r29
 420:	cf 91       	pop	r28
 422:	08 95       	ret

00000424 <GLCD_WriteChar>:
//-------------------------------------------------------------------------------------------------
//
//-------------------------------------------------------------------------------------------------
void GLCD_WriteChar(char charToWrite)
{
 424:	0f 93       	push	r16
 426:	1f 93       	push	r17
 428:	cf 93       	push	r28
 42a:	df 93       	push	r29
int i;
charToWrite -= 32; 
 42c:	80 52       	subi	r24, 0x20	; 32
for(i = 0; i < 5; i++) 
  GLCD_WriteData(GLCD_ReadByteFromROMMemory((char *)((int)font5x8 + (5 * charToWrite) + i))); 
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	ec 01       	movw	r28, r24
 432:	cc 0f       	add	r28, r28
 434:	dd 1f       	adc	r29, r29
 436:	cc 0f       	add	r28, r28
 438:	dd 1f       	adc	r29, r29
 43a:	8c 0f       	add	r24, r28
 43c:	9d 1f       	adc	r25, r29
 43e:	ec 01       	movw	r28, r24
 440:	cc 5a       	subi	r28, 0xAC	; 172
 442:	df 4f       	sbci	r29, 0xFF	; 255
 444:	8e 01       	movw	r16, r28
 446:	0b 5f       	subi	r16, 0xFB	; 251
 448:	1f 4f       	sbci	r17, 0xFF	; 255
 44a:	ce 01       	movw	r24, r28
 44c:	0e 94 b7 01 	call	0x36e	; 0x36e <GLCD_ReadByteFromROMMemory>
 450:	0e 94 85 01 	call	0x30a	; 0x30a <GLCD_WriteData>
 454:	21 96       	adiw	r28, 0x01	; 1
//-------------------------------------------------------------------------------------------------
void GLCD_WriteChar(char charToWrite)
{
int i;
charToWrite -= 32; 
for(i = 0; i < 5; i++) 
 456:	c0 17       	cp	r28, r16
 458:	d1 07       	cpc	r29, r17
 45a:	b9 f7       	brne	.-18     	; 0x44a <GLCD_WriteChar+0x26>
  GLCD_WriteData(GLCD_ReadByteFromROMMemory((char *)((int)font5x8 + (5 * charToWrite) + i))); 
GLCD_WriteData(0x00);
 45c:	80 e0       	ldi	r24, 0x00	; 0
 45e:	0e 94 85 01 	call	0x30a	; 0x30a <GLCD_WriteData>
}
 462:	df 91       	pop	r29
 464:	cf 91       	pop	r28
 466:	1f 91       	pop	r17
 468:	0f 91       	pop	r16
 46a:	08 95       	ret

0000046c <GLCD_WriteString>:
//-------------------------------------------------------------------------------------------------
//
//-------------------------------------------------------------------------------------------------
void GLCD_WriteString(char * stringToWrite)
{
 46c:	cf 93       	push	r28
 46e:	df 93       	push	r29
 470:	ec 01       	movw	r28, r24
while(*stringToWrite)
 472:	88 81       	ld	r24, Y
 474:	88 23       	and	r24, r24
 476:	31 f0       	breq	.+12     	; 0x484 <GLCD_WriteString+0x18>
 478:	21 96       	adiw	r28, 0x01	; 1
  GLCD_WriteChar(*stringToWrite++);
 47a:	0e 94 12 02 	call	0x424	; 0x424 <GLCD_WriteChar>
//-------------------------------------------------------------------------------------------------
//
//-------------------------------------------------------------------------------------------------
void GLCD_WriteString(char * stringToWrite)
{
while(*stringToWrite)
 47e:	89 91       	ld	r24, Y+
 480:	81 11       	cpse	r24, r1
 482:	fb cf       	rjmp	.-10     	; 0x47a <GLCD_WriteString+0xe>
  GLCD_WriteChar(*stringToWrite++);
}
 484:	df 91       	pop	r29
 486:	cf 91       	pop	r28
 488:	08 95       	ret

0000048a <main>:
	
	KS0108_DATA_PORT = 0b00111110;
	
	KS0108_CTRL_PORT &= ~KS0108_EN;*/
	
	GLCD_Initalize();
 48a:	0e 94 ba 01 	call	0x374	; 0x374 <GLCD_Initalize>
	GLCD_ClearScreen();
 48e:	0e 94 fe 01 	call	0x3fc	; 0x3fc <GLCD_ClearScreen>

	GLCD_GoTo(0,0);
 492:	60 e0       	ldi	r22, 0x00	; 0
 494:	80 e0       	ldi	r24, 0x00	; 0
 496:	0e 94 c9 01 	call	0x392	; 0x392 <GLCD_GoTo>
	GLCD_WriteString("+-------------------+");
 49a:	80 e6       	ldi	r24, 0x60	; 96
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	0e 94 36 02 	call	0x46c	; 0x46c <GLCD_WriteString>
	GLCD_GoTo(0,1);
 4a2:	61 e0       	ldi	r22, 0x01	; 1
 4a4:	80 e0       	ldi	r24, 0x00	; 0
 4a6:	0e 94 c9 01 	call	0x392	; 0x392 <GLCD_GoTo>
	GLCD_WriteString("|     #MICisGAY     |");
 4aa:	86 e7       	ldi	r24, 0x76	; 118
 4ac:	90 e0       	ldi	r25, 0x00	; 0
 4ae:	0e 94 36 02 	call	0x46c	; 0x46c <GLCD_WriteString>
	GLCD_GoTo(0,2);
 4b2:	62 e0       	ldi	r22, 0x02	; 2
 4b4:	80 e0       	ldi	r24, 0x00	; 0
 4b6:	0e 94 c9 01 	call	0x392	; 0x392 <GLCD_GoTo>
	GLCD_WriteString("|   KS0108 library  |");
 4ba:	8c e8       	ldi	r24, 0x8C	; 140
 4bc:	90 e0       	ldi	r25, 0x00	; 0
 4be:	0e 94 36 02 	call	0x46c	; 0x46c <GLCD_WriteString>
	GLCD_GoTo(0,3);
 4c2:	63 e0       	ldi	r22, 0x03	; 3
 4c4:	80 e0       	ldi	r24, 0x00	; 0
 4c6:	0e 94 c9 01 	call	0x392	; 0x392 <GLCD_GoTo>
	GLCD_WriteString("|                   |");
 4ca:	82 ea       	ldi	r24, 0xA2	; 162
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	0e 94 36 02 	call	0x46c	; 0x46c <GLCD_WriteString>
	GLCD_GoTo(0,4);
 4d2:	64 e0       	ldi	r22, 0x04	; 4
 4d4:	80 e0       	ldi	r24, 0x00	; 0
 4d6:	0e 94 c9 01 	call	0x392	; 0x392 <GLCD_GoTo>
	GLCD_WriteString("|  en.radzio.dxp.pl |");
 4da:	88 eb       	ldi	r24, 0xB8	; 184
 4dc:	90 e0       	ldi	r25, 0x00	; 0
 4de:	0e 94 36 02 	call	0x46c	; 0x46c <GLCD_WriteString>
	GLCD_GoTo(0,5);
 4e2:	65 e0       	ldi	r22, 0x05	; 5
 4e4:	80 e0       	ldi	r24, 0x00	; 0
 4e6:	0e 94 c9 01 	call	0x392	; 0x392 <GLCD_GoTo>
	GLCD_WriteString("|  STM32 Cortex-M3  |");
 4ea:	8e ec       	ldi	r24, 0xCE	; 206
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	0e 94 36 02 	call	0x46c	; 0x46c <GLCD_WriteString>
	GLCD_GoTo(0,6);
 4f2:	66 e0       	ldi	r22, 0x06	; 6
 4f4:	80 e0       	ldi	r24, 0x00	; 0
 4f6:	0e 94 c9 01 	call	0x392	; 0x392 <GLCD_GoTo>
	GLCD_WriteString("|  microcontrollers |");
 4fa:	84 ee       	ldi	r24, 0xE4	; 228
 4fc:	90 e0       	ldi	r25, 0x00	; 0
 4fe:	0e 94 36 02 	call	0x46c	; 0x46c <GLCD_WriteString>
	GLCD_GoTo(0,7);
 502:	67 e0       	ldi	r22, 0x07	; 7
 504:	80 e0       	ldi	r24, 0x00	; 0
 506:	0e 94 c9 01 	call	0x392	; 0x392 <GLCD_GoTo>
	GLCD_WriteString("+-------------------+");
 50a:	80 e6       	ldi	r24, 0x60	; 96
 50c:	90 e0       	ldi	r25, 0x00	; 0
 50e:	0e 94 36 02 	call	0x46c	; 0x46c <GLCD_WriteString>
	
	while(1)
	{
		
	}
 512:	ff cf       	rjmp	.-2      	; 0x512 <main+0x88>

00000514 <_exit>:
 514:	f8 94       	cli

00000516 <__stop_program>:
 516:	ff cf       	rjmp	.-2      	; 0x516 <__stop_program>
